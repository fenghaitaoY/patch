diff --git a/fingerprint/client/libfprint/interface/ca_interface.c b/fingerprint/client/libfprint/interface/ca_interface.c
index c561f75..bad16e5 100644
--- a/fingerprint/client/libfprint/interface/ca_interface.c
+++ b/fingerprint/client/libfprint/interface/ca_interface.c
@@ -78,14 +78,14 @@ int bio_init(void)
         LOGE("tac init error, ret=%d", ret);
         return ret;
     }
-    start_process();
-    start_process_extern_msg();
     LOGD("setting default active group.");
     if(strcmp(OPERATION_SYSTEM,"Android5.1")==0){
         LOGD("this system version is Android5.1 \n");
     }else{
         bio_set_active_group(DEFAULT_USER_GROUP, DEFAULT_STORAGE_PATH);
     }
+    start_process();
+    start_process_extern_msg();
 
     ma_tac_get_energy();//get bkg for factory test get image.
 
@@ -171,6 +171,13 @@ int init_navigate(void)
     LOGD("start.");
 	g_bio_status.is_fp_canceled = 0;
     LOGD("enable navigate = %d\n", g_config.enable_navigation);
+    uint32_t fids[FINGERPRINT_SIZE];
+    int fid_count = 0;
+
+    memset(fids, 0, sizeof(fids));
+    LOGD("----------init navigate fid count = %d", fid_count);
+    ma_tac_enumerate(g_config.active_group, fids, &fid_count);
+    LOGD("----------init navigate fid count = %d", fid_count);
     if ( g_config.enable_navigation )
     {
 #if defined(A80) && defined(OEM_KONKA)
@@ -178,12 +185,20 @@ int init_navigate(void)
 #else
         if(s_chip_id == 83) {
             if(strcmp(OPERATION_SYSTEM,"Android5.1")==0){
-                set_idle_cmd(navigate_work, NULL, PROCESS_NAVIGATE);
+                set_idle_cmd(navigate_work, NULL, PROCESS_NAVIGATE, 1);
             } else {
-            	set_idle_cmd(navigate_work, NULL, PROCESS_NAVIGATE);
+                if(fid_count == 0){
+            	    set_idle_cmd(navigate_work, NULL, PROCESS_NAVIGATE, 0);
+                }else{
+            	set_idle_cmd(navigate_work, NULL, PROCESS_NAVIGATE, 1);
+                }
             }
         } else {
-            set_idle_cmd(navigate_work, NULL, PROCESS_NAVIGATE);
+            if(fid_count == 0){
+                set_idle_cmd(navigate_work, NULL, PROCESS_NAVIGATE, 0);
+            }else{
+                set_idle_cmd(navigate_work, NULL, PROCESS_NAVIGATE, 1);
+            }
         }
 #endif
     }
@@ -213,6 +228,7 @@ int bio_cancel(void)
 	    error_notify(FINGERPRINT_ERROR_CANCELED);
 	}
 
+    bio_power_down();
     LOGD("end.");
 	return SUCCESS;
 }
@@ -286,6 +302,24 @@ int bio_post_enroll(void)
     return 0;
 }
 
+/**
+ * sensor切到power down 状态
+ *
+ */
+int bio_power_down(void)
+{
+    uint32_t fids[FINGERPRINT_SIZE];
+    int fid_count = 0;
+
+    memset(fids, 0, sizeof(fids));
+    ma_tac_enumerate(g_config.active_group, fids, &fid_count);
+    LOGD("--------fht---fid_count = %d", fid_count);
+    if(fid_count == 0){
+        ma_tac_power_down();
+    }
+    return 0;
+}
+
 /*删除指纹模板
  * @gid group id
  * @fid finger id
@@ -303,6 +337,10 @@ int bio_remove(uint32_t gid, uint32_t fid)
 
     g_bio_status.is_fp_canceled = 0;
     ret = ma_tac_remove(fid, fids, &len);
+    LOGD("-----------------------------len = %d", len);
+    if(len == 0){
+        stop_navigate_cmd();
+    }
 
     if ( !ret )
     {
@@ -325,6 +363,7 @@ int bio_remove(uint32_t gid, uint32_t fid)
         }
     }
 
+    bio_power_down();
     LOGD("end.");
     return ret;
 }
@@ -351,6 +390,7 @@ int bio_set_active_group(uint32_t gid, const char *store_path)
     ma_tac_set_active_group(&g_config);
     LOGD("##### interrupt_calibrated = %d", g_config.ma_ctx.interrupt_calibrated);
 
+    //bio_power_down();
     LOGD("end.");
     return SUCCESS;
 }
diff --git a/fingerprint/client/libfprint/process/authenticate.c b/fingerprint/client/libfprint/process/authenticate.c
index 5913ace..1de2b77 100644
--- a/fingerprint/client/libfprint/process/authenticate.c
+++ b/fingerprint/client/libfprint/process/authenticate.c
@@ -44,10 +44,6 @@ static int verify(struct cmd_entry *qe)
 
     uint64_t auth_time = 0;
 
-    gettimeofday(&now,NULL);
-    auth_start_timestamp = now.tv_sec * 1000 + now.tv_usec / 1000;
-    LOGD("auth_start, timestamp = %llu", (long long unsigned int)auth_start_timestamp);
-
     LOGD("challenge=%llx\n", (long long unsigned int)g_bio_context.auth_token.challenge);
 #ifdef OEM_JINGDONGFANG
     dc_send_cmd(MA_POWER_ON);//添加灭屏后触摸指纹亮屏
@@ -102,24 +98,23 @@ static int verify(struct cmd_entry *qe)
             LOGD("Do not continue for plamprint\n");
             break;
         }
-
+		if(ret == ERROR_EXTRACT_FAIL){
+			return 0;
+		}
         if ( qe->cancelled ) {
             LOGD("command cancelled\n");
             acquired_event_notify(FINGERPRINT_ACQUIRED_FINGER_UP);
             return 0;
         }
         if (fid) {
-            gettimeofday(&now,NULL);
-            auth_time = now.tv_sec * 1000 + now.tv_usec / 1000 - auth_start_timestamp;
-            LOGD("verify success, auth time %llu", (long long unsigned int)auth_time);
-
             dc_send_cmd(TIMEOUT_WAKELOCK);
             authenticate_notify(cmd_auth->gid, fid, &g_bio_context.auth_token);
-
             gettimeofday(&now,NULL);
+
             auth_time = now.tv_sec * 1000 + now.tv_usec / 1000 - auth_start_timestamp;
-            LOGD("notify success, auth time %llu", (long long unsigned int)auth_time);
-            
+            LOGD("auth_start_timestamp %llu", (long long unsigned int)auth_start_timestamp);
+
+            LOGD("auth time %llu", (long long unsigned int)auth_time);
             ma_tac_update_authenticate_data();
         }
 #ifdef OEM_CHUANYIN
@@ -204,6 +199,7 @@ static int verify(struct cmd_entry *qe)
  */
 void* authenticate_work(void *q) {
     int r = 0;
+    int chipid = -1, esdfail_num = 0;
     int count = 0;
     int cancelflag = 0;
     const int ERROR_IMAGE_COUNT = 10;
@@ -222,6 +218,8 @@ void* authenticate_work(void *q) {
     context_get_interrupt_calibrated(&calibrated);
     LOGD("calibrated=%d authCount=%d", calibrated, gAuthCount);
 
+    struct timeval now = {0};
+
     ma_tac_spi_test();
     while (1) {
         LOGD("loopstart");
@@ -234,12 +232,39 @@ void* authenticate_work(void *q) {
             //TODO  change the logic/
             LOGD("go to kernel\n");
             dc_send_cmd(SLEEP);
+            r = ma_tac_detect_touch(AUTHENTICATE_DETECT);
+            LOGD("detect touch r = %d", r);
+            //esd procedure START
+            if(r == -1){
+                chipid = ma_tac_factory_get_vendor();
+                LOGD("resume1 chipid=%d \n",chipid);
+            }
+
+            while(chipid != 0x53 && chipid != 0x50 && chipid != 112) {
+                if (qe->cancelled) {
+                    LOGD(" esd  auth_timeenticate cancelled\n");
+                    return NULL;
+                }
+                LOGD("-----esd while -----");
+                dc_send_cmd(SCREEN_OFF);
+                if(esdfail_num > 2){
+                    usleep(50000);
+                }else{
+                    usleep(5000);
+                }
+                dc_send_cmd(SCREEN_ON);
+
+                chipid = ma_tac_factory_get_vendor();
+                esdfail_num++;
+                LOGD("resume2 chipid=%d \n",chipid);
+            }
+            esdfail_num = 0;
+            //esd procedure ENDGROUP
             if ( qe->cancelled ) {
                 LOGD("command cancelled\n");
                 return 0;
             }
-            ma_tac_refresh_caliline();
-            r = ma_tac_detect_touch(AUTHENTICATE_DETECT);
+//            ma_tac_refresh_caliline();
             LOGD("detect touch r=%d trigger_count=%d\n", r, s_error_trigger_count);
             if (r == NORMAL_UNPRESSED) {
                 s_error_image_count = 0;
@@ -285,7 +310,9 @@ void* authenticate_work(void *q) {
 
         dc_send_cmd(TIMEOUT_WAKELOCK);
         acquired_event_notify(FINGERPRINT_ACQUIRED_FINGER_DOWN);
-
+        
+        gettimeofday(&now,NULL);
+        auth_start_timestamp = now.tv_sec * 1000 + now.tv_usec / 1000;
         r = verify(qe);
 
         if (qe->cancelled) {
diff --git a/fingerprint/client/libfprint/process/enroll.c b/fingerprint/client/libfprint/process/enroll.c
index 8568eb7..cb5cbd2 100644
--- a/fingerprint/client/libfprint/process/enroll.c
+++ b/fingerprint/client/libfprint/process/enroll.c
@@ -247,8 +247,10 @@ void* enroll_work(void * q)
                     }
                 }
             }
-			if (finish == 1) break;
-
+			if (finish == 1) {
+                start_navigate_cmd();
+                break;
+            }
             if(strcmp(OPERATION_SYSTEM,"Android5.1")==0){
                 if(enroll_downflag == 1){
                     LOGD(" enroll notify finger up \n");
diff --git a/fingerprint/client/libfprint/process/process.c b/fingerprint/client/libfprint/process/process.c
index 2bc9abc..c140743 100644
--- a/fingerprint/client/libfprint/process/process.c
+++ b/fingerprint/client/libfprint/process/process.c
@@ -102,6 +102,19 @@ static struct cmd_entry* fetch_cmd(void)
     return &gCmdFifo2.cmd_current;
 }
 
+void start_navigate_cmd(){
+    LOGD("------------start");
+    g_idle_cmd.exist = 1;
+    LOGD("------------end");
+}
+
+void stop_navigate_cmd(){
+    LOGD("--------------start");
+    g_idle_cmd.exist = 0;
+    LOGD("-------------end");
+}
+
+
 /*消息cmd处理线程
  * @p null
  */
@@ -258,14 +271,15 @@ void enqueue_cmd(function_pointer cp,
 
 void set_idle_cmd(function_pointer cp,
         void *parameter,
-        uint8_t state)
+        uint8_t state, int runstate)
 {
     pthread_mutex_lock(&gCmdQmtx);
     dc_send_cmd(TIMEOUT_WAKELOCK);
     LOGD("%s\n", _num2string(state));
     // cancel current processing command
 
-    g_idle_cmd.exist = 1;
+    g_idle_cmd.exist = runstate;
+    LOGD(" runstate = %d ", runstate);
     g_idle_cmd.cancelled = 0;
 
     g_idle_cmd.cmd_process = cp;
diff --git a/fingerprint/client/libfprint/process/process.h b/fingerprint/client/libfprint/process/process.h
index 0cdb5d3..31da8e3 100644
--- a/fingerprint/client/libfprint/process/process.h
+++ b/fingerprint/client/libfprint/process/process.h
@@ -37,7 +37,10 @@ struct cmd_entry {
 void cancel_cmd(void);
 
 void enqueue_cmd(function_pointer cp, void *parameter, uint8_t state);
-void set_idle_cmd(function_pointer cp, void *parameter, uint8_t state);
+void set_idle_cmd(function_pointer cp, void *parameter, uint8_t state, int runstate);
+
+void start_navigate_cmd();
+void stop_navigate_cmd();
 
 void start_process(void);
 
diff --git a/fingerprint/client/libfprint/process/refresh.c b/fingerprint/client/libfprint/process/refresh.c
index 31d7d2b..e38e492 100644
--- a/fingerprint/client/libfprint/process/refresh.c
+++ b/fingerprint/client/libfprint/process/refresh.c
@@ -120,6 +120,7 @@ static void handler_interrupt_parameters(void) {
         }
         pop_cmd_leave_factory_test();
     }
+    bio_power_down();
     FLUSH_LOG("end.\n");
 }
 
diff --git a/fingerprint/client/libfprint/tac/communicate_tube.h b/fingerprint/client/libfprint/tac/communicate_tube.h
index 17d03a2..ae373c2 100644
--- a/fingerprint/client/libfprint/tac/communicate_tube.h
+++ b/fingerprint/client/libfprint/tac/communicate_tube.h
@@ -63,4 +63,5 @@ int ma_tac_navigate_direction(void);
 int ma_tac_reset_interrupt_para(void);
 int ma_tac_enumerate(int gid, uint32_t fids[], int *fid_count);
 int ma_tac_check_press(int *press_ok);
+int ma_tac_power_down(void);
 #endif
diff --git a/fingerprint/client/libfprint/tac/microarray_tac.c b/fingerprint/client/libfprint/tac/microarray_tac.c
index 49c4802..e67426c 100644
--- a/fingerprint/client/libfprint/tac/microarray_tac.c
+++ b/fingerprint/client/libfprint/tac/microarray_tac.c
@@ -409,6 +409,21 @@ int ma_tac_reverse_wakeup(void)
     return reverse_to_wakeup();
 }
 
+/**
+ *切sensor 到power down 模式
+ *＠return :0 success
+ */
+int ma_tac_power_down(void)
+{
+    protocol_power_down_t msg;
+    memset(&msg, 0, sizeof(protocol_power_down_t));
+    ma_tac_security_invoke(PROTOCOL_POWER_DOWN, &msg, sizeof(protocol_power_down_t));
+    if(msg.response.err) {
+        LOGE("error with code 0x%x\n", msg.response.err);
+    }
+    return 0;
+}
+
 /*注册完成后的处理
  * @return:0 success
  */
diff --git a/fingerprint/include/protocol.h b/fingerprint/include/protocol.h
index 3b020d0..4828e69 100644
--- a/fingerprint/include/protocol.h
+++ b/fingerprint/include/protocol.h
@@ -70,6 +70,7 @@ enum {
 	PROTOCOL_BIG_DATA_SPI_TEST,
 	PROTOCOL_DATA_WRITE_TEST,
 	PROTOCOL_DATA_READ_TEST,
+    PROTOCOL_POWER_DOWN,
 };
 
 typedef union {
@@ -222,6 +223,16 @@ typedef union {
 } protocol_remove_t;
 
 typedef union {
+    struct{
+        int unused;
+    }request;
+    struct{
+        int ret;
+        int err;
+    }response;
+}protocol_power_down_t;
+
+typedef union {
 	struct {
 		int unused;
 	} request;
diff --git a/fingerprint/service/policy/policy.c b/fingerprint/service/policy/policy.c
index 2ebcda9..3296ba1 100644
--- a/fingerprint/service/policy/policy.c
+++ b/fingerprint/service/policy/policy.c
@@ -245,6 +245,7 @@ uint32_t policy_generate_id(uint64_t user_id)
 int policy_enumerate_fingerid(uint32_t* fid_array, int *len) {
 	int i, last_auth_fid_index = FINGERPRINT_SIZE;
 
+    LOGD(" start ");
 	*len = 0;
 	for (i = 0; i<FINGERPRINT_SIZE; i++) {
 		if (s_fng_data_head[i]->used) {
@@ -265,6 +266,7 @@ int policy_enumerate_fingerid(uint32_t* fid_array, int *len) {
 		fid_array[*len - 1] = s_last_auth_fid;
 	}
 
+    LOGD(" end ");
 	return 0;
 }
 
@@ -337,7 +339,7 @@ int policy_remove_finger(int fid, uint32_t *fid_array, int *len) {
 
     LOGD("fid = %d, len = %d\n", fid, *len);
 	if (fid==0) {
-		policy_enumerate_fingerid(fid_array, len);
+	    policy_enumerate_fingerid(fid_array, len);
 		for (; i < *len; i++) {
 			index = get_index_with_fid(fid_array[i]);
 			if (FINGERPRINT_SIZE == index) {
@@ -354,6 +356,7 @@ int policy_remove_finger(int fid, uint32_t *fid_array, int *len) {
         LOGD("index = %d", index);
 		s_fng_data_head[index]->used = 0;
 		memset(s_fng_data_body[index], 0, s_fng_data_size - sizeof(struct fp_template_head));
+	    policy_enumerate_fingerid(fid_array, len);
         //ret = policy_remove_template(index, &s_fng_data_head[index]->used);
 		ret = policy_remove_template(index, s_fng_data_head[index]);
 	}
diff --git a/fingerprint/service/protocol/protocol.c b/fingerprint/service/protocol/protocol.c
index d41857e..4e4e34f 100644
--- a/fingerprint/service/protocol/protocol.c
+++ b/fingerprint/service/protocol/protocol.c
@@ -346,6 +346,17 @@ static void protocol_calc_interrupt_para(protocol_calc_interrupt_para_t *data)
     data->response.ret = ret;
 }
 
+static void protocol_power_down(protocol_power_down_t *data)
+{
+    int ret = 0;
+    ret = sensor_powerdown_mode();
+    if(ret <=0){
+        data->response.err = ret;
+    } else {
+        data->response.err = 0;
+    }
+
+}
 static void protocol_detect_mode(protocol_detect_mode_t *data)
 {
     int ret = 0;
@@ -729,6 +740,7 @@ static inline const char* enum2str(int cmdnum)
         ENUM_TO_STR(PROTOCOL_CALIBRATE);
         ENUM_TO_STR(PROTOCOL_CALC_INTERRUPT_PARA);
         ENUM_TO_STR(PROTOCOL_DETECT_MODE);
+        ENUM_TO_STR(PROTOCOL_POWER_DOWN);
         ENUM_TO_STR(PROTOCOL_REVERSE_WAKEUP);
         ENUM_TO_STR(PROTOCOL_SAVE_PARAS);
         ENUM_TO_STR(PROTOCOL_INIT_NAVIGATE);
@@ -806,6 +818,8 @@ void protocol_handle_plain_cmd(int cmd, void* data) {
             EASY_PROTOCOL(protocol_calc_interrupt_para);
         case PROTOCOL_DETECT_MODE:
             EASY_PROTOCOL(protocol_detect_mode);
+        case PROTOCOL_POWER_DOWN:
+            EASY_PROTOCOL(protocol_power_down);
         case PROTOCOL_REVERSE_WAKEUP:
             EASY_PROTOCOL(protocol_reverse_wakeup);
         case PROTOCOL_SAVE_PARAS:
