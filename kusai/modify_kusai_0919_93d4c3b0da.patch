diff --git a/driver/android6.0/ioctl_cmd.h b/driver/android6.0/ioctl_cmd.h
index 99836de..650f781 100644
--- a/driver/android6.0/ioctl_cmd.h
+++ b/driver/android6.0/ioctl_cmd.h
@@ -63,6 +63,7 @@
 #define MA_POWER_ON             _IO(MA_IOC_MAGIC, 49)
 #define MA_SID03_REPORT_KEY_ONE        _IO(MA_IOC_MAGIC, 50)
 #define MA_SID03_REPORT_KEY_TWO        _IO(MA_IOC_MAGIC, 51)
+#define HAL_SET_VERSION_INFO           _IOW(MA_IOC_MAGIC,   52, unsigned int)
 
 #endif /* __IOCTL_CMD_H__ */
 
diff --git a/fingerprint/client/libfprint/interface/ca_interface.c b/fingerprint/client/libfprint/interface/ca_interface.c
index a3b632c..943f877 100644
--- a/fingerprint/client/libfprint/interface/ca_interface.c
+++ b/fingerprint/client/libfprint/interface/ca_interface.c
@@ -20,6 +20,7 @@ microarray_properties_t g_config;
 bio_status_t g_bio_status = {0};
 bio_context_t g_bio_context = {0};
 int g_work_enroll = 0;
+void set_version_info_to_driver();
 
 /*hal层的准备工作
  * @return 0:success
@@ -84,6 +85,7 @@ int bio_init(void)
         LOGE("tac init error, ret=%d", ret);
         return ret;
     }
+    set_version_info_to_driver();
     start_process();
     start_process_extern_msg();
     LOGD("setting default active group.");
@@ -95,8 +97,7 @@ int bio_init(void)
 
     ma_tac_get_energy();//get bkg for factory test get image.
 
-#if (defined(PRODUCT_E2_OVERSEA) && defined(OEM_KONKA)) || (defined(PRODUCT_DOGE_A163) && defined(OEM_KUSAI))
-    || (defined(A88))
+#if (defined(PRODUCT_E2_OVERSEA) && defined(OEM_KONKA)) || (defined(PRODUCT_DOGE_A63) && defined(OEM_KUSAI)) || (defined(A88))
     start_screen_status_process();
 #endif
 
@@ -110,6 +111,29 @@ int bio_init(void)
     return SUCCESS;
 }
 
+void set_version_info_to_driver()
+{
+    char version_info[64];
+
+    memset(&version_info, 0, sizeof(version_info));
+    version_info[0] = 1;
+    sprintf(&version_info[1], "afs%d", g_bio_context.chip_id);
+    dc_send_cmd_with_value(HAL_SET_VERSION_INFO, (int*)version_info);
+    memset(&version_info, 0, sizeof(version_info));
+
+    version_info[0] = 2;
+    sprintf(&version_info[1], "%s_%s_%s_%s",OEM,SUPPORT_SENSOR,BUILD_VERSION,GIT_SHORT_VERSION); 
+    dc_send_cmd_with_value(HAL_SET_VERSION_INFO, (int*)version_info);
+    memset(&version_info, 0, sizeof(version_info));
+
+    version_info[0] = 3;
+    sprintf(&version_info[1], "Microarray");
+    dc_send_cmd_with_value(HAL_SET_VERSION_INFO, (int*)version_info);
+
+    version_info[0] = 4;
+    sprintf(&version_info[1], "%s-%s", COMPILE_USER, COMPILE_DATE);
+    dc_send_cmd_with_value(HAL_SET_VERSION_INFO, (int*)version_info);
+}
 
 
 
diff --git a/fingerprint/client/libfprint/process/authenticate.c b/fingerprint/client/libfprint/process/authenticate.c
index 5913ace..6054c58 100644
--- a/fingerprint/client/libfprint/process/authenticate.c
+++ b/fingerprint/client/libfprint/process/authenticate.c
@@ -114,6 +114,9 @@ static int verify(struct cmd_entry *qe)
             LOGD("verify success, auth time %llu", (long long unsigned int)auth_time);
 
             dc_send_cmd(TIMEOUT_WAKELOCK);
+#if defined(OEM_KUSAI)
+            dc_send_cmd(MA_KEY_F14);
+#endif
             authenticate_notify(cmd_auth->gid, fid, &g_bio_context.auth_token);
 
             gettimeofday(&now,NULL);
diff --git a/fingerprint/client/libfprint/process/enroll.c b/fingerprint/client/libfprint/process/enroll.c
index a8540aa..f9832f2 100644
--- a/fingerprint/client/libfprint/process/enroll.c
+++ b/fingerprint/client/libfprint/process/enroll.c
@@ -110,7 +110,7 @@ void* enroll_work(void * q)
             presscount = g_config.enroll_fast_num;
             LOGD("presscount=%d\n", presscount);
             while (presscount > 0 && down) {
-                down = ma_tac_detectTouch_getEnergy();
+                down = ma_tac_detect_touch(PRESS_DETECT);
                 LOGD("detect touch down2 = %d \n",down);
 
                 is_timeout = check_timeout(start_time, cmd_enroll->timeout_sec);
@@ -178,7 +178,7 @@ void* enroll_work(void * q)
                     	LOGD("do nothing");
                     } else if (ret == ERROR_EXTRACT_FAIL) {
                         LOGD("image extract fail.");
-                        acquired_event_notify(FINGERPRINT_ACQUIRED_INSUFFICIENT);
+                        //acquired_event_notify(FINGERPRINT_ACQUIRED_INSUFFICIENT);
                     } else if (ret == ERROR_ENROLL_DUPLICATE_AREA) {
                     	duplicate_area_num++;
                     	{
diff --git a/fingerprint/client/libfprint/process/screen_status.c b/fingerprint/client/libfprint/process/screen_status.c
index 42b827d..f9484f1 100644
--- a/fingerprint/client/libfprint/process/screen_status.c
+++ b/fingerprint/client/libfprint/process/screen_status.c
@@ -16,19 +16,21 @@ static void *screen_status_thread(void *p)
 {
     (void) p;
     int screen_status = SCREEN_STATUS_ON, ret=0;
-#if defined(PRODUCT_E2_OVERSEA) && defined(OEM_KONKA)
-    const int default_ck_period_s_off = DEFAULT_CK_PERIOD_A80;
-    const int default_ck_period_s_on = DEFAULT_CK_PERIOD_A80;
-#elif defined(PRODUCT_DOGE_A63) && defined(OEM_KUSAI)
-    const int default_ck_period_s_off = DEFAULT_CK_PERIOD_A83;
-    const int default_ck_period_s_on = DEFAULT_CK_PERIOD_A83;
-#endif
-#ifdef A88
-    const int default_ck_period_s_off = DEFAULT_CK_PERIOD_A88;
-    const int default_ck_period_s_on = DEFAULT_CK_PERIOD_SCREEN_ON_A88;
+    int chip_id = 0;
+    int default_ck_period_s_off;
+    int default_ck_period_s_on;
+
+    chip_id = ma_tac_factory_get_vendor();
+    LOGD("status thread chip_id = %d",chip_id);
+    if(chip_id == 0x53){
+        default_ck_period_s_off = DEFAULT_CK_PERIOD_A83;
+        default_ck_period_s_on = DEFAULT_CK_PERIOD_A83;
+    }else{
+        default_ck_period_s_off = DEFAULT_CK_PERIOD_A88;
+        default_ck_period_s_on = DEFAULT_CK_PERIOD_SCREEN_ON_A88;
+    }
     int refosc_s_off = property_get_int32(KEY_REFOSC, DEFAULT_REFOSC_A88);
     int refosc_s_on = property_get_int32(KEY_REFOSC_S_ON, DEFAULT_REFOSC_SCREEN_ON_A88);
-#endif
     int ck_period_s_off = property_get_int32(KEY_CK_PERIOD, default_ck_period_s_off);
     int ck_period_s_on = property_get_int32(KEY_CK_PERIOD_S_ON, default_ck_period_s_on);
     while(1) {
diff --git a/fingerprint/client/libfprint/utils/ma_utils.c b/fingerprint/client/libfprint/utils/ma_utils.c
index d534b7f..71a4d03 100644
--- a/fingerprint/client/libfprint/utils/ma_utils.c
+++ b/fingerprint/client/libfprint/utils/ma_utils.c
@@ -189,7 +189,7 @@ static void init_properties_sensor83(int cover_type, microarray_properties_t *pr
         properties->cutimage = 0;
     }
     properties->enroll_times = property_get_int32(KEY_ENROLL_TIMES, ENROLL_TIMES) - 2;
-    properties->duplicate_area_th = property_get_int32(KEY_ENROLL_MATCH_NUM_AREA, 20);
+    properties->duplicate_area_th = property_get_int32(KEY_ENROLL_MATCH_NUM_AREA, 80);
 }
 #endif
 
@@ -315,7 +315,7 @@ static void init_properties_sensor48(int cover_type, microarray_properties_t *pr
     }else{
         properties->enroll_times = property_get_int32(KEY_ENROLL_TIMES, 18) - 2;
     }
-    properties->duplicate_area_th = property_get_int32(KEY_ENROLL_MATCH_NUM_AREA, 12);
+    properties->duplicate_area_th = property_get_int32(KEY_ENROLL_MATCH_NUM_AREA, 5);
     properties->part_touch_ratio = property_get_int32(KEY_ENROLL_PART_TOUCH_RATIO, 80);
 }
 #endif
diff --git a/fingerprint/service/protocol/protocol.c b/fingerprint/service/protocol/protocol.c
index 5c03415..86ad6ab 100644
--- a/fingerprint/service/protocol/protocol.c
+++ b/fingerprint/service/protocol/protocol.c
@@ -155,7 +155,7 @@ static void protocol_detect_touch(protocol_detect_touch_t *data)
     int ret=-1;
 	int result = 0;
 
-    result = sensor_get_proper_image(g_image_buffer, image_size, 1);
+    result = sensor_get_proper_image(g_image_buffer, image_size, 1, data->request.type);
     LOGD("get_proper ret=%d\n", result);
     if (result == SUCCESS) {
         ret = algorithm_press_detect_texture(g_image_buffer, data->request.type);
@@ -175,7 +175,7 @@ static void protocol_detect_touch_get_energy(protocol_detect_touch_get_energy_t
 #endif
     int pressret = 0, score = 0, ret = 0;
     static int minscore = 0x7fffffff;
-    ret = sensor_get_proper_image(g_image_buffer, image_size, 1);
+    ret = sensor_get_proper_image(g_image_buffer, image_size, 1,ENROLL_DETECT);
     if(ret == SUCCESS) {
         score = algorithm_get_energy(g_image_buffer);
         pressret = algorithm_press_detect_texture(g_image_buffer, ENROLL_DETECT);
@@ -218,7 +218,7 @@ static void protocol_get_image_score(protocol_get_image_score_t *data)
 {
     int ret;
 
-    ret = sensor_get_proper_image(g_image_buffer, image_size, 1);
+    ret = sensor_get_proper_image(g_image_buffer, image_size, 1,PRESS_DETECT);
     if(ret == SUCCESS) {
         ret = algorithm_get_energy(g_image_buffer);
     }
diff --git a/fingerprint/service/soft_sensor/include/sensor_adapter.h b/fingerprint/service/soft_sensor/include/sensor_adapter.h
index 49653d4..8b3aae1 100644
--- a/fingerprint/service/soft_sensor/include/sensor_adapter.h
+++ b/fingerprint/service/soft_sensor/include/sensor_adapter.h
@@ -42,7 +42,7 @@ typedef struct soft_sensor {
      * @return  SUCCESS:成功
      *          FAIL：失败
      */
-    int (*sensor_get_proper_image)(void *image, const int len, const int line_step);
+    int (*sensor_get_proper_image)(void *image, const int len, const int line_step, int type);
 
     /* reset芯片到正常采图模式
      * @return  SUCCESS:成功
@@ -257,7 +257,7 @@ int init_adapter_sensor(soft_sensor_t**);
 
 int sensor_create(microarray_properties_t *config);
 int sensor_destory(void);
-int sensor_get_proper_image(void *image, const int len, const int line_step);
+int sensor_get_proper_image(void *image, const int len, const int line_step, int type);
 int sensor_reset_mode(void);
 int sensor_powerdown_mode(void);
 int sensor_detect_mode(int type);
diff --git a/fingerprint/service/soft_sensor/sensor48/algorithm/finger_detect.c b/fingerprint/service/soft_sensor/sensor48/algorithm/finger_detect.c
index 0451b1c..9490c89 100644
--- a/fingerprint/service/soft_sensor/sensor48/algorithm/finger_detect.c
+++ b/fingerprint/service/soft_sensor/sensor48/algorithm/finger_detect.c
@@ -516,7 +516,7 @@ int fp48_finger_detect(u8 *imgIn, u8 *imgTmp)
 
 	per = press_percent(imgIn,imgRate);
 	if (per < 10) { //无按压
-		ret = 102;
+		ret = 0;
 		goto end;
 	}
 
diff --git a/fingerprint/service/soft_sensor/sensor48/sensor_48.c b/fingerprint/service/soft_sensor/sensor48/sensor_48.c
index dad84f6..e4d4d68 100644
--- a/fingerprint/service/soft_sensor/sensor48/sensor_48.c
+++ b/fingerprint/service/soft_sensor/sensor48/sensor_48.c
@@ -695,7 +695,7 @@ int fp48_interrupt_factory_test_pre(void) {
 int fp48_interrupt_factory_test() {
     int ret = 0;
 
-    fp48_detect_parameters(0, 0, 0xe0, 0xf0);
+    fp48_detect_parameters(0, 0, 0xe0, 0xe0);
     platform_msleep(s48_interrupt_delay_ms);
     sensor_set_register(MA_CAPTURE_MODE, 0xff);
     platform_msleep(3);
diff --git a/fingerprint/service/soft_sensor/sensor48/wrapper_v2.c b/fingerprint/service/soft_sensor/sensor48/wrapper_v2.c
index 4c31508..c2f9a74 100644
--- a/fingerprint/service/soft_sensor/sensor48/wrapper_v2.c
+++ b/fingerprint/service/soft_sensor/sensor48/wrapper_v2.c
@@ -182,7 +182,7 @@ static int algorithm48_enroll(void) {
 			int temp, match_points = 0;
 			char *tpl = policy_get_template_data2(fidlist[len]);
 			tempID = (int *) tpl;
-			temp = *tempID > 3 ? 3 : *tempID;
+			temp = *tempID > 13 ? 13 : *tempID;
 			match_points = pvm48_match(tpl + SENSOR48_TPL_SIZE, &temp, g48_enroll_ctx->area);
 			if (match_points > 0) {
 				ret = ERROR_ENROLL_DUPLICATE_FINGER;
diff --git a/fingerprint/service/soft_sensor/sensor64/sensor_64.c b/fingerprint/service/soft_sensor/sensor64/sensor_64.c
index 37bc831..5d4f628 100644
--- a/fingerprint/service/soft_sensor/sensor64/sensor_64.c
+++ b/fingerprint/service/soft_sensor/sensor64/sensor_64.c
@@ -716,7 +716,7 @@ int fp64_interrupt_factory_test_pre(void) {
 int fp64_interrupt_factory_test() {
     int ret = 0;
 
-    fp64_detect_parameters(0, 0, 0xe0, 0xf0);
+    fp64_detect_parameters(0, 0, 0xe0, 0xe0);
     platform_msleep(s64_interrupt_delay_ms);
     sensor_set_register(MA_CAPTURE_MODE, 0xff);
     platform_msleep(3);
diff --git a/fingerprint/service/soft_sensor/sensor83/Android.mk b/fingerprint/service/soft_sensor/sensor83/Android.mk
index 4e13d22..ebb1101 100644
--- a/fingerprint/service/soft_sensor/sensor83/Android.mk
+++ b/fingerprint/service/soft_sensor/sensor83/Android.mk
@@ -9,8 +9,8 @@ LOCAL_SRC_FILES := \
 	algorithm/sensor83_navigate.c \
 	algorithm/check_press.c \
 	algorithm/sensor83_judge_diff_module.c \
-	algorithm/sensor83_judge_finger.c \
 	algorithm/sensor83_press_detect.c \
+	algorithm/sensor83_finger_detect.c \
 	sensor_83.c \
 	sensor_context.c \
 	sensor_wrapper.c \
diff --git a/fingerprint/service/soft_sensor/sensor83/algorithm/algorithm.h b/fingerprint/service/soft_sensor/sensor83/algorithm/algorithm.h
index 1e3f100..8c784a9 100644
--- a/fingerprint/service/soft_sensor/sensor83/algorithm/algorithm.h
+++ b/fingerprint/service/soft_sensor/sensor83/algorithm/algorithm.h
@@ -30,8 +30,9 @@ void checkFullC(int *firstChange, int *preFull, int *fullChange, int *tagFullC,
 int checkUse(u8 *tagCur);
 int fp83_get_var(int *imgRaw, int *imgBkg, unsigned char grey_offset);
 float fp83_diff_module(int* imgBuf1, int *imgBuf2);
-int gradxy(char *impha,int width,int height);
+//int gradxy(char *impha,int width,int height);
 int get_temp_txt(char *temp,int *src,int len);
 int cpress_detet(int *img,int width,int height);
+int finger_detect(u8 *img1);
 
 #endif /* ALGORITHM_H_ */
diff --git a/fingerprint/service/soft_sensor/sensor83/algorithm/detect.c b/fingerprint/service/soft_sensor/sensor83/algorithm/detect.c
index 4e81c62..178d6ae 100644
--- a/fingerprint/service/soft_sensor/sensor83/algorithm/detect.c
+++ b/fingerprint/service/soft_sensor/sensor83/algorithm/detect.c
@@ -16,7 +16,7 @@ int fp83_press_detect( int *imgRaw, int *imgBkg, unsigned char grey_offset )
     int TH, count;
     int val = ((unsigned int)grey_offset << 4) | 0x0f;
     count = 0;
-    TH = 100;
+    TH = 80;
     for ( j = 4; j < 124; j++ ) {
         for ( i = 4; i < 76; i++ ) {
             count += ( ( (imgRaw + j*80)[i] - (imgBkg + j*80)[i] ) > TH ) ? 1 : 0;
diff --git a/fingerprint/service/soft_sensor/sensor83/algorithm/sensor83_finger_detect.c b/fingerprint/service/soft_sensor/sensor83/algorithm/sensor83_finger_detect.c
new file mode 100644
index 0000000..34aa4fb
--- /dev/null
+++ b/fingerprint/service/soft_sensor/sensor83/algorithm/sensor83_finger_detect.c
@@ -0,0 +1,588 @@
+#include "algorithm.h"
+#define Width 80
+#define Height 128
+#define TH 50
+#define GLCM_DIS 3  //灰度共生矩阵的统计距离  
+#define GLCM_CLASS 8 //计算灰度共生矩阵的图像灰度值等级化  
+#define DBL_EPSILON 1e-016
+typedef unsigned char u8;
+#define IMAGE_SIZE 80*80
+
+double my_ceil(double para){
+    double tmp;
+    if(para >0){
+        tmp = para - (int)para;
+        if(tmp >0){
+            para=(int)(para+1);
+        }else{
+            para = (int)para;
+        }
+    }else{
+        para = (int)para;
+    }
+    return para;
+}
+
+//图像增强
+void clahe(u8* parry)
+{
+	 int i,j,k;
+	 int sum=Height*Width;
+	 int grayCount[256];
+	 float s[256];
+     float s2[256];
+	 int max,min,a;
+	 for(a=0;a<256;a++)
+        grayCount[a]=0;
+	 for(i=2;i<Height-2;i++)
+       for(j=2;j<Width-2;j++)
+	   {
+           int grayValue = parry[i*Width+j];
+           grayCount[grayValue]++;
+	   }
+	 s[0]=(float)grayCount[0]/(float)sum;
+	//灰度转换
+	 for(k=1;k<256;k++)
+	 {
+		 s[k]=s[k-1]+(float)grayCount[k]/(float)sum;
+	 }
+     for (i=0;i<256;i++)
+	 {
+         s2[i] = (int)(255*s[i]+0.5);
+	 }
+      //写入图像
+	  for(i=0;i<Height;i++)
+       for(j=0;j<Width;j++)
+	   {
+		   int value = parry[i*Width+j];
+		   if(value>50)
+		       parry[i*Width+j] = (u8)s2[value];
+		   else
+			   parry[i*Width+j] = 0;
+	   }
+}
+
+void CreatGauss(double sigma, double **pdKernel, int *pnWidowSize)
+{
+    long i;  
+    //数组中心点  
+    int nCenter;  
+    //数组中一点到中心点距离  
+    double dDis;  
+    //中间变量 
+    double dValue; 
+    double dSum;  dSum = 0;  
+    // [-3*sigma,3*sigma] 以内数据，会覆盖绝大部分滤波系数  
+    *pnWidowSize = 1+ 2*my_ceil(3*sigma);  
+    nCenter = (*pnWidowSize)/2;  
+    *pdKernel = (double *) malloc(*pnWidowSize * sizeof(double));  
+    //生成高斯数据 
+    for(i=0;i<(*pnWidowSize);i++)  
+    { 
+        dDis = i - nCenter; 
+        dValue = ma_exp(-(1/2)*dDis*dDis/(sigma*sigma))/(ma_sqrt(2*3.1415926)*sigma);   
+        (*pdKernel)[i] = dValue;   
+        dSum+=dValue;   
+    } 
+    //归一化 
+    for(i=0;i<(*pnWidowSize);i++)  
+        (*pdKernel)[i]/=dSum;   
+}
+
+//用高斯滤波器平滑原图像 
+void GaussianSmooth(u8* pGray, u8* pResult, double sigma) 
+{ 
+    long x, y;  
+	long i;  
+    //高斯滤波器长度  
+	int nWindowSize;  
+    //窗口长度  
+	int nLen;  
+    //一维高斯滤波器  
+	double *pdKernel; 
+    //高斯系数与图像数据的点乘  
+	double dDotMul;   
+    //滤波系数总和  
+    double dWeightSum;   
+    double *pdTemp; 
+
+	long j;
+    //数组中心点  
+	int nCenter;  
+    //数组中一点到中心点距离  
+	double dDis;  
+    //中间变量 
+    double dValue; 
+    double dSum;  dSum = 0;  
+     // [-3*sigma,3*sigma] 以内数据，会覆盖绝大部分滤波系数  
+	nWindowSize = 1+ 2*my_ceil(3*sigma);  
+    nCenter = nWindowSize/2;
+    pdKernel = (double *) malloc(nWindowSize * sizeof(double));  
+    pdTemp = (double*) malloc(Width*Height *sizeof(double));  
+    //产生一维高斯数据 
+    //生成高斯数据 
+    for(i=0;i< nWindowSize;i++)  
+	{ 
+        dDis = i - nCenter; 
+        dValue = ma_exp(-(1/2)*dDis*dDis/(sigma*sigma))/(ma_sqrt(2*3.1415926)*sigma);   
+		pdKernel[i] = dValue;   
+		dSum+=dValue;   
+	} 
+    //归一化 
+    for(i=0;i<nWindowSize;i++)
+        pdKernel[i]/=dSum;
+
+   // CreatGauss(sigma, &pdKernel, &nWindowSize);  
+    nLen = nWindowSize/2;   
+    //x方向滤波 
+    for(y=0;y<Height;y++)  
+	{ 
+      for(x=0;x<Width;x++)   
+	  { 
+         dDotMul = 0;     
+		 dWeightSum = 0; 
+         for(i=(-nLen);i<=nLen;i++)    
+		 { 
+            //判断是否在图像内部 
+            if((i+x)>=0 && (i+x)<Width)     
+			{ 
+               dDotMul+=(double)pGray[y*Width+(i+x)] * pdKernel[nLen+i]; 
+               dWeightSum += pdKernel[nLen+i];    
+			}   
+		 } 
+     pdTemp[y*Width+x] = dDotMul/dWeightSum;  
+	  }  
+	}  
+    //y方向滤波 
+    for(x=0; x<Width;x++)  { 
+       for(y=0; y<Height; y++)   
+	   { 
+          dDotMul = 0;    
+		  dWeightSum = 0;
+              for(i=(-nLen);i<=nLen;i++)    
+			  { 
+                  if((i+y)>=0 && (i+y)< Height)     
+				  { 
+                      dDotMul += (double)pdTemp[(y+i)*Width+x]*pdKernel[nLen+i];      
+					  dWeightSum += pdKernel[nLen+i];     
+				  }    
+			  } 
+          pResult[y*Width+x] = (unsigned char)dDotMul/dWeightSum;   
+	   } 
+	}
+
+    if(pdKernel != NULL){
+        free(pdKernel);
+        pdKernel = NULL;
+    }
+    if(pdTemp != NULL){
+        free(pdTemp);
+        pdTemp = NULL;
+    }
+
+}
+
+//计算灰度共生特征，排除部分硬币，果皮按压
+void calGLCM_one(u8 *img1,double num,double *feat)  
+{  
+    int i,j,w,k,l;
+ 
+    int* glcm0 = (int*)malloc(GLCM_CLASS*GLCM_CLASS*sizeof(int));  
+	int* glcm45 = (int*)malloc(GLCM_CLASS*GLCM_CLASS*sizeof(int));  
+	int* glcm90 = (int*)malloc(GLCM_CLASS*GLCM_CLASS*sizeof(int));  
+	int* glcm135 = (int*)malloc(GLCM_CLASS*GLCM_CLASS*sizeof(int));  
+    int* histImage = (int*)malloc(Width*Height*sizeof(int));  
+    double contrast = 0,homogenity = 0, energy = 0,entropy = 0,var=0,var2=0; 
+	int min,max;
+	//-----------------------灰度共生矩阵求纹理特征---------------------
+	//灰度等级化---分GLCM_CLASS个等级   
+	for(i = 0;i < Height;i++)
+        for(j = 0;j < Width;j++)
+		{
+			histImage[i * Width + j] = (int)(img1[i*Width+j] * GLCM_CLASS / 256);  
+		}
+  
+    //初始化共生矩阵  
+    for (i = 0;i < GLCM_CLASS;i++)  
+        for (j = 0;j < GLCM_CLASS;j++)  
+        {
+            glcm0[i * GLCM_CLASS + j] = 0;  
+            glcm45[i * GLCM_CLASS + j] = 0;  
+		    glcm90[i * GLCM_CLASS + j] = 0;  
+	        glcm135[i * GLCM_CLASS + j] = 0;  
+	    }
+  
+    //计算灰度共生矩阵  
+    //水平方向  
+    for (i = 5;i < Height-5;i++)  
+    {  
+        for (j = 5;j < Width-5;j++)  
+        {  
+            if(img1[i*Width+j] > TH)
+			{
+				l = histImage[i * Width + j];  
+                if(j + GLCM_DIS >= 0 && j + GLCM_DIS < Width)  
+                {  
+                    k = histImage[i * Width + j + GLCM_DIS];  
+                    glcm0[l * GLCM_CLASS + k]++;  
+                }  
+                if(j - GLCM_DIS >= 0 && j - GLCM_DIS < Width)  
+                {  
+                    k = histImage[i * Width + j - GLCM_DIS];  
+                    glcm0[l * GLCM_CLASS + k]++;  
+                }  
+			}
+        }  
+        
+    }  
+    //垂直方向  
+    for (i = 5;i < Height-5;i++)  
+    {  
+        for (j = 5;j < Width-5;j++)  
+        {  
+            if(img1[i*Width+j] > TH)
+			{
+				l = histImage[i * Width + j];  
+                if(i + GLCM_DIS >= 0 && i + GLCM_DIS < Height)   
+                {  
+                    k = histImage[(i + GLCM_DIS) * Width + j];  
+                    glcm90[l * GLCM_CLASS + k]++;  
+                }  
+                if(i - GLCM_DIS >= 0 && i - GLCM_DIS < Height)   
+                {  
+                    k = histImage[(i - GLCM_DIS) * Width + j];  
+                    glcm90[l * GLCM_CLASS + k]++;  
+				}
+            }  
+             
+        }  
+    }  
+    //45度方向  
+    for (i = 5;i < Height-5;i++)  
+    {  
+        for (j = 5;j < Width-5;j++)  
+        {  
+            if(img1[i*Width+j] > TH)
+			{
+				l = histImage[i * Width + j];  
+  
+                if(j + GLCM_DIS >= 0 && j + GLCM_DIS < Width && i + GLCM_DIS >= 0 && i + GLCM_DIS < Height)  
+                {  
+                    k = histImage[(i + GLCM_DIS) * Width + j + GLCM_DIS];  
+                    glcm45[l * GLCM_CLASS + k]++;  
+                }  
+                if(j - GLCM_DIS >= 0 && j - GLCM_DIS < Width && i - GLCM_DIS >= 0 && i - GLCM_DIS < Height)  
+                {  
+                    k = histImage[(i - GLCM_DIS) * Width + j - GLCM_DIS];  
+                    glcm45[l * GLCM_CLASS + k]++;  
+				}
+            }    
+        }  
+    }  
+  
+	//135度方向  
+	for (i = 5;i < Height-5;i++)  
+    {  
+        for (j = 5;j < Width-5;j++)  
+        {     
+			if(img1[i*Width+j] > TH)
+			{
+				l = histImage[i * Width + j];  
+  
+                if(j + GLCM_DIS >= 0 && j + GLCM_DIS < Width && i - GLCM_DIS >= 0 && i - GLCM_DIS < Height)  
+                {  
+                    k = histImage[(i - GLCM_DIS) * Width + j + GLCM_DIS];  
+                    glcm135[l * GLCM_CLASS + k]++;  
+                }  
+                if(j - GLCM_DIS >= 0 && j - GLCM_DIS < Width && i + GLCM_DIS >= 0 && i + GLCM_DIS < Height)  
+                {  
+                    k = histImage[(i + GLCM_DIS) * Width + j - GLCM_DIS];  
+                    glcm135[l * GLCM_CLASS + k]++;  
+                }   
+			}
+        }  
+    }  
+    //计算特征值  
+    for (i = 0;i < GLCM_CLASS;i++)  
+    {  
+        for (j = 0;j < GLCM_CLASS;j++)  
+        {  
+			//对比度  
+            contrast += (i - j) * (i - j) * glcm0[i * GLCM_CLASS + j] + (i - j) * (i - j) * glcm45[i * GLCM_CLASS + j]
+	                 + (i - j) * (i - j) * glcm90[i * GLCM_CLASS + j] + (i - j) * (i - j) * glcm135[i * GLCM_CLASS + j]; 
+			//一致性  
+            homogenity += 1.0 / (1 + (i - j) * (i - j)) * glcm0[i * GLCM_CLASS + j] + 1.0 / (1 + (i - j) * (i - j)) * glcm45[i * GLCM_CLASS + j]
+			           + 1.0 / (1 + (i - j) * (i - j)) * glcm90[i * GLCM_CLASS + j] + 1.0 / (1 + (i - j) * (i - j)) * glcm135[i * GLCM_CLASS + j];  
+			//能量  
+            energy += glcm0[i * GLCM_CLASS + j] * glcm0[i * GLCM_CLASS + j] + glcm45[i * GLCM_CLASS + j] * glcm45[i * GLCM_CLASS + j]
+			       + glcm90[i * GLCM_CLASS + j] * glcm90[i * GLCM_CLASS + j] + glcm135[i * GLCM_CLASS + j] * glcm135[i * GLCM_CLASS + j];  
+            max = glcm0[i * GLCM_CLASS + j];
+			min = glcm0[i * GLCM_CLASS + j];
+		    if(glcm45[i * GLCM_CLASS + j] > max)
+				max = glcm45[i * GLCM_CLASS + j];
+			if(glcm90[i * GLCM_CLASS + j] > max)
+				max = glcm90[i * GLCM_CLASS + j];
+			if(glcm135[i * GLCM_CLASS + j] > max)
+				max = glcm135[i * GLCM_CLASS + j];
+
+			if(glcm45[i * GLCM_CLASS + j] < min)
+				min = glcm45[i * GLCM_CLASS + j];
+			if(glcm90[i * GLCM_CLASS + j] < min)
+				min = glcm90[i * GLCM_CLASS + j];
+			if(glcm135[i * GLCM_CLASS + j] < min)
+				min = glcm135[i * GLCM_CLASS + j];
+
+			var = var + max - min;
+			var2 = ma_abs(glcm0[i * GLCM_CLASS + j]-glcm45[i * GLCM_CLASS + j]) + ma_abs(glcm0[i * GLCM_CLASS + j]-glcm90[i * GLCM_CLASS + j])
+				+ ma_abs(glcm0[i * GLCM_CLASS + j]-glcm135[i * GLCM_CLASS + j]) + ma_abs(glcm45[i * GLCM_CLASS + j]-glcm90[i * GLCM_CLASS + j])
+				+ ma_abs(glcm90[i * GLCM_CLASS + j]-glcm135[i * GLCM_CLASS + j]);
+        }  
+    } 
+    
+	feat[0] = var/num;
+	feat[1] = var2/num;
+	feat[2] = energy/num/100000;
+	feat[3] = homogenity/num;//
+	feat[4] = contrast/num;
+
+    if(glcm0 != NULL){
+        free(glcm0);
+        glcm0 = NULL;
+    }
+    if(glcm45 != NULL){
+        free(glcm45);
+        glcm45 = NULL;
+    }
+    if(glcm90 != NULL){
+        free(glcm90);
+        glcm90 = NULL;
+    }
+    if(glcm135 != NULL){
+        free(glcm135);
+        glcm135 = NULL;
+    }
+    if(histImage != NULL){
+        free(histImage);
+        histImage = NULL;
+    }
+}
+//计算梯度，排除部分硬币，果皮按压
+void gradxy(u8*img1,u8 *img2,double *feat)
+{
+	int i,j;
+	int num = 0;
+	double gradx = 0,grady = 0,grad;
+	double sum = 0;
+	
+	for(i = 5;i < Height-5;i++)
+        for(j = 5;j < Width-5;j++)
+		{
+			if(img1[i*Width+j] > 90)
+			{
+			    num ++;		
+
+
+				grad = ma_abs(img2[(i+1)*Width+j] - img2[i*Width+j]) ;
+				if(grad>10)
+					sum ++;
+			}
+		}
+    sum = sum*100/num;
+	feat[5] = sum;
+}
+
+//计算方向，排除平行纹（方向一致性高）
+void oritation(u8*img1,double *feat)
+{
+	int i,j;
+	double gradx = 0,grady = 0,grad;
+	int D1,D2,D3,D4,D5,D6,D7,D8,V1,V2,V3,V4,max1,max2,count=0,count1=0;
+	u8* ori = (u8*)malloc(Width*Height*sizeof(u8));
+	int var_ori = 0;
+	
+	for(i = 0;i < Height;i++)
+        for(j = 0;j < Width;j++)
+		{
+			ori[i*Width+j] = 0;
+		}
+		
+	for(i = 10;i < Height-10;i++)
+        for(j = 10;j < Width-10;j++)
+		{
+			if(img1[i*Width+j] > 0)
+			{
+				count1 ++;		
+
+				D1 = ma_abs(img1[i*Width+j+4]-img1[i*Width+j]) + ma_abs(img1[i*Width+j+3]-img1[i*Width+j]) 
+					+ ma_abs(img1[i*Width+j+2]-img1[i*Width+j]) + ma_abs(img1[i*Width+j+1]-img1[i*Width+j]) 
+				    + ma_abs(img1[i*Width+j-1]-img1[i*Width+j]) + ma_abs(img1[i*Width+j-2]-img1[i*Width+j]) 
+					+ ma_abs(img1[i*Width+j-3]-img1[i*Width+j]) + ma_abs(img1[i*Width+j-4]-img1[i*Width+j]) ;
+				D2 = ma_abs(img1[(i+2)*Width+j-4]-img1[i*Width+j]) + ma_abs(img1[(i+2)*Width+j-3]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i+1)*Width+j-3]-img1[i*Width+j]) + ma_abs(img1[(i+1)*Width+j-2]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i-1)*Width+j+2]-img1[i*Width+j]) + ma_abs(img1[(i-1)*Width+j+3]-img1[i*Width+j]) 
+					+ ma_abs(img1[(i-2)*Width+j+3]-img1[i*Width+j]) + ma_abs(img1[(i-2)*Width+j+4]-img1[i*Width+j]);
+				D3 = ma_abs(img1[(i+4)*Width+j-4]-img1[i*Width+j]) + ma_abs(img1[(i+3)*Width+j-3]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i+2)*Width+j-2]-img1[i*Width+j]) + ma_abs(img1[(i+1)*Width+j-1]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i-1)*Width+j+1]-img1[i*Width+j]) + ma_abs(img1[(i-2)*Width+j+2]-img1[i*Width+j]) 
+					+ ma_abs(img1[(i-3)*Width+j+3]-img1[i*Width+j]) + ma_abs(img1[(i-4)*Width+j+4]-img1[i*Width+j]);
+                D4 = ma_abs(img1[(i+4)*Width+j-2]-img1[i*Width+j]) + ma_abs(img1[(i+3)*Width+j-2]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i+3)*Width+j-1]-img1[i*Width+j]) + ma_abs(img1[(i+2)*Width+j-1]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i-2)*Width+j+1]-img1[i*Width+j]) + ma_abs(img1[(i-3)*Width+j+1]-img1[i*Width+j]) 
+					+ ma_abs(img1[(i-3)*Width+j+2]-img1[i*Width+j]) + ma_abs(img1[(i-4)*Width+j+2]-img1[i*Width+j]);
+                D5 = ma_abs(img1[(i+4)*Width+j]-img1[i*Width+j]) + ma_abs(img1[(i+3)*Width+j]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i+2)*Width+j]-img1[i*Width+j]) + ma_abs(img1[(i+1)*Width+j]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i-1)*Width+j]-img1[i*Width+j]) + ma_abs(img1[(i-2)*Width+j]-img1[i*Width+j]) 
+					+ ma_abs(img1[(i-3)*Width+j]-img1[i*Width+j]) + ma_abs(img1[(i-4)*Width+j]-img1[i*Width+j]);
+                D6 = ma_abs(img1[(i+4)*Width+j+2]-img1[i*Width+j]) + ma_abs(img1[(i+3)*Width+j+2]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i+3)*Width+j+1]-img1[i*Width+j]) + ma_abs(img1[(i+2)*Width+j+1]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i-2)*Width+j-1]-img1[i*Width+j]) + ma_abs(img1[(i-3)*Width+j-1]-img1[i*Width+j]) 
+					+ ma_abs(img1[(i-3)*Width+j-2]-img1[i*Width+j]) + ma_abs(img1[(i-4)*Width+j-2]-img1[i*Width+j]);
+                D7 = ma_abs(img1[(i+4)*Width+j+4]-img1[i*Width+j]) + ma_abs(img1[(i+3)*Width+j+3]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i+2)*Width+j+2]-img1[i*Width+j]) + ma_abs(img1[(i+1)*Width+j+1]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i-1)*Width+j-1]-img1[i*Width+j]) + ma_abs(img1[(i-2)*Width+j-2]-img1[i*Width+j]) 
+					+ ma_abs(img1[(i-3)*Width+j-3]-img1[i*Width+j]) + ma_abs(img1[(i-4)*Width+j-4]-img1[i*Width+j]);
+                D8 = ma_abs(img1[(i+2)*Width+j+4]-img1[i*Width+j]) + ma_abs(img1[(i+2)*Width+j+3]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i+1)*Width+j+3]-img1[i*Width+j]) + ma_abs(img1[(i+1)*Width+j+2]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i-1)*Width+j-2]-img1[i*Width+j]) + ma_abs(img1[(i-1)*Width+j-3]-img1[i*Width+j]) 
+					+ ma_abs(img1[(i-2)*Width+j-3]-img1[i*Width+j]) + ma_abs(img1[(i-2)*Width+j-4]-img1[i*Width+j]);
+
+                V1 = ma_abs(D1-D5);
+				V2 = ma_abs(D2-D6);
+				V3 = ma_abs(D3-D7);
+				V4 = ma_abs(D4-D8);
+				
+				max1 = V1;
+				if(D1>D5)
+				{
+					ori[i*Width+j] = 5;
+				}
+				else
+				{
+					ori[i*Width+j] = 1;  
+				}
+				if(max1<V2)
+				{
+					max1 = V2;
+					if(D2>D6)
+					{
+						ori[i*Width+j] = 6;
+					}
+					else
+					{
+						ori[i*Width+j] = 2;
+					}
+				}
+				if(max1<V3)
+				{
+					max1 = V3;
+					if(D3>D7)
+					{
+						ori[i*Width+j] = 7;
+					}
+					else
+					{
+						ori[i*Width+j] = 3;
+					}
+				}
+				if(max1<V4)
+				{
+					max1 = V4;
+					if(D4>D8)
+					{
+						ori[i*Width+j] = 8;
+					}
+					else
+					{
+						ori[i*Width+j] = 4;
+					}
+				}	
+			}
+		}
+
+	for(i = 11;i < Height-11;i++)
+        for(j = 11;j < Width-11;j++)
+		{
+			if(ori[i*Width+j] > 0)
+			{
+				if(ori[i*Width+j-1] > 0)
+				    var_ori += ma_abs(ori[i*Width+j] - ori[i*Width+j-1]) > 5 ? 1 : ma_abs(ori[i*Width+j] - ori[i*Width+j-1])*ma_abs(ori[i*Width+j] - ori[i*Width+j-1]);
+				else
+					var_ori += (ori[i*Width+j] - ori[i*Width+j-1])*(ori[i*Width+j] - ori[i*Width+j-1]);
+				if(ori[i*Width+j+1] > 0)
+				    var_ori += ma_abs(ori[i*Width+j] - ori[i*Width+j+1]) > 5 ? 1 : ma_abs(ori[i*Width+j] - ori[i*Width+j+1])*ma_abs(ori[i*Width+j] - ori[i*Width+j+1]);
+		        else
+					var_ori += (ori[i*Width+j] - ori[i*Width+j+1])*(ori[i*Width+j] - ori[i*Width+j+1]);
+				if(ori[(i-1)*Width+j] > 0)
+				    var_ori += ma_abs(ori[i*Width+j] - ori[(i-1)*Width+j]) > 5 ? 1 : ma_abs(ori[i*Width+j] - ori[(i-1)*Width+j])*ma_abs(ori[i*Width+j] - ori[(i-1)*Width+j]);
+				else
+					var_ori += (ori[i*Width+j] - ori[(i-1)*Width+j])*(ori[i*Width+j] - ori[(i-1)*Width+j]);
+				if(ori[(i+1)*Width+j] > 0)
+				    var_ori += ma_abs(ori[i*Width+j] - ori[(i+1)*Width+j]) > 5 ? 1 : ma_abs(ori[i*Width+j] - ori[(i+1)*Width+j])*ma_abs(ori[i*Width+j] - ori[(i+1)*Width+j]);
+				else
+					var_ori += (ori[i*Width+j] - ori[(i+1)*Width+j])*(ori[i*Width+j] - ori[(i+1)*Width+j]);
+			}
+		}
+    feat[6] = (double)(var_ori)/count1;
+    if(ori != NULL){
+        free(ori);
+        ori = NULL;
+    }
+}
+
+//描述：区分手指和非手指按压（平行纹，果皮，静电，汗液，硬币，水滴）
+//输入：去完背景后的8位图像
+//return：0 非手指   1 手指
+int finger_detect(u8 *img1)
+{
+	int i,j,num=0;
+	double per;
+	double *feat = NULL; //(double*)malloc(9*sizeof(double));
+	u8* img2 = NULL; //(u8*)malloc(Width*Height*sizeof(u8));
+	double dec;
+
+	clahe(img1);
+	//计算覆盖率，不管是什么
+	for(i = 5;i < Height-5;i++)
+        for(j = 5;j < Width-5;j++)
+		{
+			if(img1[i*Width+j] > TH)
+			{
+				num ++;
+			}
+		}
+	per = (double)num*100/(Width-10)/(Height-10);
+
+	if(per<70)
+	{
+		return 0;
+	}
+
+	feat = (double*)malloc(9*sizeof(double));
+	img2 = (u8*)malloc(Width*Height*sizeof(u8));
+
+	GaussianSmooth(img1,img2,0.3);  
+
+	calGLCM_one(img1,per,feat);
+	oritation(img1,feat);
+	gradxy(img1,img2,feat);
+
+	if(feat[0] < 50 || feat[6]>15)
+		dec = 0;
+	else
+	{
+	   dec = (double)(feat[0] - 70)/5 + (double)(450 - feat[3])/150 
+		+ (double)(feat[4] - 1500)/100 + (double)(feat[5] - 25)/3 + (double)(15 - feat[6])*3;    
+	}
+    if(feat != NULL){
+        free(feat);
+        feat = NULL;
+    }
+    if(img2 != NULL){
+        free(img2);
+        img2 = NULL;
+    }
+	if(dec>10)
+	    return 1; 
+	else
+		return 0;
+}
diff --git a/fingerprint/service/soft_sensor/sensor83/sensor_wrapper.c b/fingerprint/service/soft_sensor/sensor83/sensor_wrapper.c
index 6a1a8d5..39917b0 100644
--- a/fingerprint/service/soft_sensor/sensor83/sensor_wrapper.c
+++ b/fingerprint/service/soft_sensor/sensor83/sensor_wrapper.c
@@ -267,7 +267,7 @@ static int sensor83_refresh_calibrate_data(void) {
 }
 
 static int sensor83_get_proper_image(void *img, const int len,
-		const int line_step) {
+		const int line_step, int type) {
 	int ret = SUCCESS, TH = 3;
 	int *image = (int *) img;
 	static int error_num = 0;
@@ -282,19 +282,16 @@ static int sensor83_get_proper_image(void *img, const int len,
 	fp83_read_image(image, len, line_step, 1);
 	ret = check_grey(image);
 
-	if(ret != SUCCESS) {
-	    error_num++;
-	    if(error_num >= TH) {
-	        sensor83_refresh_calibrate_data();
-	        context_set_sensor83_interrupt_calibrated(0);
-	        context_set_sensor83_param_calibrated(0);
-	        save_sensor83_context();
-	    } else {
-	        ret = ERROR_READ_IMAGE_FAIL;
-	    }
-	} else {
-	    error_num = 0;
-	}
+    fp83_remove_bkg(image, context_get_sensor83_bkg(),
+            g83_authen_ctx->remove_bkg_img, g83_enroll_ctx->proc_buf, g_sensor83_grey_offset);
+    int isfinger= finger_detect(g83_authen_ctx->remove_bkg_img);
+    LOGD("---ret = %d,isfinger = %d", ret, isfinger);
+    if(ret != SUCCESS && isfinger != 0 && type != AUTHENTICATE_DETECT) {
+        sensor83_refresh_calibrate_data();
+        context_set_sensor83_interrupt_calibrated(0);
+        context_set_sensor83_param_calibrated(0);
+        save_sensor83_context();
+    }
 
 	LOGD("end, ret = %d.\n", ret);
 
@@ -431,7 +428,7 @@ static int algorithm83_press_detect_texture(void *image, int type) {
 	    ret = (sratio > 25) ? NORMAL_PRESSED : NORMAL_UNPRESSED;
 	    break;
 	case ENROLL_DETECT:
-	    ret = (sratio > 90) ? NORMAL_PRESSED : NORMAL_UNPRESSED;
+	    ret = (sratio > 80) ? NORMAL_PRESSED : NORMAL_UNPRESSED;
 	    break;
 	case PRESS_DETECT:
 	    ret = (sratio > 20) ? NORMAL_PRESSED : NORMAL_UNPRESSED;
@@ -878,7 +875,7 @@ static int sensor83_factory_test_get_image(void *image) {
 	LOGD("start.\n");
 	ret = sensor83_capture_mode();
 	if (ret == SUCCESS) {
-		ret = sensor83_get_proper_image(image_in, IMAGE_SIZE, 1);
+		ret = sensor83_get_proper_image(image_in, IMAGE_SIZE, 1,CAPTURE_DETECT);
 		if (ret == SUCCESS) {
 			ret = algorithm83_press_detect_texture(image_in, CAPTURE_DETECT);
 			energy = algorithm83_get_energy(image_in);
diff --git a/fingerprint/service/soft_sensor/sensor_adapter.c b/fingerprint/service/soft_sensor/sensor_adapter.c
index 158cde3..3f3da19 100644
--- a/fingerprint/service/soft_sensor/sensor_adapter.c
+++ b/fingerprint/service/soft_sensor/sensor_adapter.c
@@ -143,9 +143,9 @@ int sensor_destory(void)
     return g_soft_sensor.sensor_destory();
 }
 
-int sensor_get_proper_image(void *image, const int len, const int line_step)
+int sensor_get_proper_image(void *image, const int len, const int line_step, int type)
 {
-    return g_soft_sensor.sensor_get_proper_image(image, len, line_step);
+    return g_soft_sensor.sensor_get_proper_image(image, len, line_step, type);
 }
 
 int sensor_reset_mode(void)
diff --git a/version/product.csv b/version/product.csv
index 18af8d2..8a0d536 100644
--- a/version/product.csv
+++ b/version/product.csv
@@ -20,5 +20,6 @@ A156,Yude,A121_N,Trustonic,armeabi arm64-v8a,Android6.0,Yes,Yes,Yes,No,14,3
 Z285,Yude,A121_N,Trustkernel,arm64-v8a,Android6.0,Yes,Yes,Yes,Yes,14,3
 F620,XINGFEI,A83_T,Android,arm64-v8a,Android6.0,Yes,Yes,Yes,No,14,3
 Android,Hct,A120_N,Trustkernel,arm64-v8a armeabi,Android6.0,Yes,Yes,Yes,No,14,3
-DOGE_A63,Kusai,A83_N,Android,arm64-v8a,Android6.0,Yes,Yes,Yes,No,14,3
+DOGE_A63,Kusai,A83_T,Android,arm64-v8a armeabi,Android8.0,Yes,Yes,Yes,No,14,3
+DOGE_A63,Kusai,A83_N,Trustkernel,arm64-v8a armeabi,Android6.0,Yes,Yes,Yes,No,14,3
 isharkL2,ZhanXun,A83_N,Watchtrust,x86_64,Android6.0,Yes,Yes,Yes,No,12,3
diff --git a/version/test.csv b/version/test.csv
index bc2bf3c..24588a1 100644
--- a/version/test.csv
+++ b/version/test.csv
@@ -67,3 +67,4 @@ Default,Android,A96_N&A88_N&A64_N&A48_N,Trustkernel_thr_sdk,arm64-v8a armeabi-v7
 Default,Android,A121_N&A120_N,Trustkernel_thr_sdk,arm64-v8a armeabi-v7a,Android8.0,Yes,Yes,Yes,No,14,3
 Default,Android,A96_N&A88_N&A64_N&A48_N,Microtrust_utsdk_shared,arm64-v8a armeabi-v7a,Android8.0,Yes,Yes,Yes,No,14,3
 Default,Android,A96_N&A88_N&A64_N&A48_N,Microtrust_utsdk,arm64-v8a armeabi-v7a,Android8.0,Yes,Yes,Yes,No,14,3
+DOGE_A63,Kusai,A96_N&A88_N&A64_N&A48_N&A83_T,Android,arm64-v8a armeabi,Android6.0,Yes,Yes,Yes,No,14,3
