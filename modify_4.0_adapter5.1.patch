diff --git a/fingerprint/client/fingerprintso/Android.mk b/fingerprint/client/fingerprintso/Android.mk
index 64d3fc7..52cbd66 100644
--- a/fingerprint/client/fingerprintso/Android.mk
+++ b/fingerprint/client/fingerprintso/Android.mk
@@ -16,11 +16,13 @@ LOCAL_PATH := $(call my-dir)
 
 include $(CLEAR_VARS)
 
-LOCAL_MODULE := fingerprint.default
+#LOCAL_MODULE := fingerprint.default
+LOCAL_MODULE := mafprint
 
 LOCAL_MODULE_RELATIVE_PATH := hw
 
-LOCAL_SRC_FILES := fingerprint.c
+#LOCAL_SRC_FILES := fingerprint.c
+LOCAL_SRC_FILES := ma_release_Jnifp.c
 
 LOCAL_C_INCLUDES := $(COMMON_INCLUDE)
 
diff --git a/fingerprint/client/fingerprintso/ma_release_Jnifp.c b/fingerprint/client/fingerprintso/ma_release_Jnifp.c
new file mode 100644
index 0000000..60677e8
--- /dev/null
+++ b/fingerprint/client/fingerprintso/ma_release_Jnifp.c
@@ -0,0 +1,329 @@
+#include "ma_release_Jnifp.h"
+#include<stdlib.h>
+#include<pthread.h>
+#include<android/log.h>
+#include <stdio.h>
+#include "../utils/notify.h"
+#include "config.h"
+#include "../libfprint/interface/ca_interface.h"
+#include "hw_auth_token.h"
+
+
+jmethodID mid;
+jmethodID setResult;
+jmethodID setMsg;
+jmethodID setFid;
+jmethodID setEcode;
+
+jclass objclass;
+jobject mobj;
+pthread_t thread;
+JavaVM *m_vm;
+
+jint msg;
+jint fid;
+jint result;
+jint ecode;
+//////////start fp class/////////////
+jclass fingerCls;
+jmethodID fingerId;
+jobject mFprint;
+jobject globalFprint;
+
+jfieldID msgFid;
+jfieldID fidFid;
+jfieldID resultFid;
+jfieldID ecodeFid;
+
+
+static int notify(fingerprint_t *fp);
+
+//初始化的时候会调进来一次，在这个方法里持有jvm的引用
+JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved){
+	LOGD(" ==================start ");
+    LOGE("===============11111======");
+    m_vm=vm;
+    JNIEnv* env = NULL;
+    jint result = -1;
+    if(m_vm){
+    	LOGD("m_vm init success\n");
+    }else{
+    	LOGD("m_vm init failed\n");
+    }
+    if ((*vm)->GetEnv(vm, (void**)&env, JNI_VERSION_1_4) != JNI_OK){
+        return result;
+    }
+    LOGD(" end \n");
+    return JNI_VERSION_1_4;
+}
+
+JNIEXPORT void JNICALL JNI_OnUnload(JavaVM* vm, void* reserved) {
+
+
+}
+
+
+
+JNIEnv* getJNIEnv(int* needsDetach){
+	LOGD("start \n");
+    JNIEnv* env = NULL;
+    jint result = -1;
+    *needsDetach = 0;
+    if ((*m_vm)->GetEnv(m_vm, (void**) &env, JNI_VERSION_1_4) != JNI_OK){
+        int status = (*m_vm)->AttachCurrentThread(m_vm, &env, 0);
+        if (status < 0){
+        	 LOGD("failed to attach current thread \n");
+            return NULL;
+        }
+        *needsDetach = 1;
+    }
+    LOGD("=end=\n");
+    return env;
+}
+/*
+ * 实现回调
+ */
+void callbackMethod(fingerprint_t *fp){
+
+	LOGD("start \n");
+    int needsDetach = 0;
+    JNIEnv *env=getJNIEnv(&needsDetach);
+
+    int i;
+	(*env)->SetIntField(env, globalFprint, msgFid, fp->msg);
+	(*env)->SetIntField(env, globalFprint, fidFid, fp->fid);
+	(*env)->SetIntField(env, globalFprint, resultFid, fp->result);
+	(*env)->SetIntField(env, globalFprint, ecodeFid, fp->ecode);
+	(*env)->CallVoidMethod(env, mobj, mid, globalFprint);
+
+
+	jthrowable exception = (*env)->ExceptionOccurred(env);
+	if (exception) {
+		(*env)->ExceptionDescribe(env);
+	}
+
+    if(needsDetach){
+        (*m_vm)->DetachCurrentThread(m_vm);
+        //(*env)->DeleteLocalRef(env,jstr);
+    }
+    LOGD("=end=\n");
+}
+
+/*
+ * Class:     com_android_ma_JNIFprint
+ * Method:    start
+ * Signature: ()V
+ */
+JNIEXPORT void JNICALL Java_ma_release_Jnifp_setNotify
+(JNIEnv * env, jobject jobject1){
+	LOGD("===========start \n");
+
+    objclass = (*env)->FindClass(env, "ma/release/Jnifp");
+    fingerCls = (*env)->FindClass(env,"ma/release/Fingerprint");
+    if ((*env)->ExceptionCheck(env)) {
+       return;
+    }
+    mid = (*env)->GetMethodID(env, objclass, "callback", "(Lma/release/Fingerprint;)V");
+    if ((*env)->ExceptionCheck(env)) {
+       return ;
+    }
+    fingerId = (*env)->GetMethodID(env,fingerCls,"<init>" ,"()V");
+    if ((*env)->ExceptionCheck(env)) {
+       return;
+    }
+
+    msgFid = (*env)->GetFieldID(env, fingerCls, "msg", "I");
+    fidFid = (*env)->GetFieldID(env, fingerCls, "fid", "I");
+    resultFid = (*env)->GetFieldID(env, fingerCls, "result", "I");
+    ecodeFid = (*env)->GetFieldID(env, fingerCls, "ecode", "I");
+
+
+    mobj=(*env)->NewGlobalRef(env, jobject1);
+    mFprint = (*env)->NewObject(env,fingerCls,fingerId);
+    globalFprint = (*env)->NewGlobalRef(env,mFprint);
+
+    LOGD("end \n");
+}
+
+static int notify(fingerprint_t *fp) {
+	LOGD("============start \n");
+    int ret=0;
+    LOGD("fid = %d , msg=%d， result==%d, ecode = %d\n",fp->fid, fp->msg,fp->result, fp->ecode);
+    callbackMethod(fp);
+    LOGD("end \n");
+    return ret;
+}
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    open
+ * Signature: (Ljava/lang/String;)I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_open
+  (JNIEnv * env, jclass cls , jstring path){
+
+	LOGD("start \n");
+	int ret =0, val;
+	jboolean bIsCopy;
+	const char *fpath;
+
+    fpath = (*env)->GetStringUTFChars(env, path, &bIsCopy);
+    bio_init();
+    bio_set_active_group(0, fpath);
+    (*env)->ReleaseStringUTFChars(env, path, fpath);
+    //通知函数
+    set_notify(notify);
+    ret = ma_tac_calibrate(); //添加校准,解决重启失效问题
+
+	LOGD("end \n");
+	return ret;
+}
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    close
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_close
+  (JNIEnv *env, jclass cls){
+	LOGD("start \n");
+	(*env)->DeleteGlobalRef(env,mobj);
+	int ret = 0;
+
+    bio_close();
+	LOGD("end \n");
+	return ret;
+}
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    preEnroll
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_preEnroll
+  (JNIEnv *env, jclass cls){
+	LOGD(" start \n");
+	int ret = 0;
+    ret = bio_pre_enroll();
+	LOGD(" end \n");
+	return ret;
+}
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    enroll
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_enroll
+  (JNIEnv *env, jclass cls){
+	LOGD("start \n");
+	int ret = 0;
+    hw_auth_token_t hat;
+    ret =  bio_enroll(0,0,&hat);
+	LOGD("end \n");
+	return ret;
+}
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    postEnroll
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_postEnroll
+  (JNIEnv *env, jclass cls){
+	LOGD("start \n");
+	int ret = 0;
+    ret = bio_post_enroll();
+    ret = bio_cancel();
+	LOGD("end \n");
+	return ret;
+}
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    authenticate
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_authenticate
+  (JNIEnv *env, jclass cls){
+	LOGD("start \n");
+	int ret = 0;
+    ret = bio_authenticate(0,0);
+	LOGD("end \n");
+	return ret;
+}
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    stopAuthenticate
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_stopAuthenticate
+  (JNIEnv *env, jclass cls){
+	LOGD("start \n");
+	int ret = 0;
+    ret = bio_cancel();
+	LOGD("end \n");
+	return ret;
+}
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    enumerate
+ * Signature: ([BI)I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_enumerate
+  (JNIEnv *env, jclass cls, jintArray arr, jint len){
+	LOGD("start \n");
+	int ret = 0 , i = 0;
+	uint32_t buf[len];
+    uint32_t gids[len];
+    bio_enumerate(gids, buf, &len);
+    for(i =0;i<len;i++){
+        LOGD("===============buf[%d]= %d",i, buf[i]);
+    }
+    (*env)->SetIntArrayRegion(env, arr, 0, len, (const jint*)buf);
+	LOGD("end \n");
+	return ret;
+}
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    remove
+ * Signature: (I)I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_remove
+  (JNIEnv *env, jclass cls, jint fid){
+	LOGD(" start ");
+	int ret = 0;
+    ret = bio_remove(0, fid);
+	LOGD("end \n");
+	return ret;
+}
+
+/*
+ * Class:     ma_release_jnifp
+ * Method:    calibrate
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_calibrate(JNIEnv *env, jclass cls){
+    LOGD("start");
+    int ret = 0;
+    ret = ma_tac_calibrate();
+    return ret;
+    LOGD("end");
+}
+
+/*
+ * Class:     ma_release_jnifp
+ * Method:    calibrate
+ * Signature: ()I
+ */
+ JNIEXPORT jint JNICALL Java_ma_release_Jnifp_testSPI
+(JNIEnv *env, jclass cls){
+    LOGD("start");
+    int ret = 0;
+    ret = ma_tac_spi_test();
+    return ret;
+    LOGD("end");
+}
diff --git a/fingerprint/client/fingerprintso/ma_release_Jnifp.h b/fingerprint/client/fingerprintso/ma_release_Jnifp.h
new file mode 100644
index 0000000..405a6c1
--- /dev/null
+++ b/fingerprint/client/fingerprintso/ma_release_Jnifp.h
@@ -0,0 +1,109 @@
+/* DO NOT EDIT THIS FILE - it is machine generated */
+#include <jni.h>
+/* Header for class ma_release_Jnifp */
+
+#ifndef _Included_ma_release_Jnifp
+#define _Included_ma_release_Jnifp
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    start
+ * Signature: ()V
+ */
+JNIEXPORT void JNICALL Java_ma_release_Jnifp_setNotify
+  (JNIEnv *, jobject);
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    open
+ * Signature: (Ljava/lang/String;)I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_open
+  (JNIEnv *, jclass, jstring);
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    close
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_close
+  (JNIEnv *, jclass);
+
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    preEnroll
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_preEnroll
+  (JNIEnv *, jclass);
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    enroll
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_enroll
+  (JNIEnv *, jclass);
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    postEnroll
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_postEnroll
+  (JNIEnv *, jclass);
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    authenticate
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_authenticate
+  (JNIEnv *, jclass);
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    stopAuthenticate
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_stopAuthenticate
+  (JNIEnv *, jclass);
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    enumerate
+ * Signature: ([BI)I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_enumerate
+  (JNIEnv *, jclass, jbyteArray, jint);
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    remove
+ * Signature: (I)I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_remove
+  (JNIEnv *, jclass, jint);
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    calibrate
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_calibrate
+  (JNIEnv *, jclass);
+
+/*
+ * Class:     ma_release_Jnifp
+ * Method:    testSPI
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL Java_ma_release_Jnifp_testSPI
+  (JNIEnv *, jclass);
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/fingerprint/client/libfprint/interface/ca_interface.c b/fingerprint/client/libfprint/interface/ca_interface.c
index cf31713..2af942e 100644
--- a/fingerprint/client/libfprint/interface/ca_interface.c
+++ b/fingerprint/client/libfprint/interface/ca_interface.c
@@ -250,7 +250,7 @@ int bio_init(void)
     start_process();
     start_process_extern_msg();
     LOGD("set default active group.");
-    bio_set_active_group(DEFAULT_USER_GROUP, DEFAULT_STORAGE_PATH);
+    //bio_set_active_group(DEFAULT_USER_GROUP, DEFAULT_STORAGE_PATH);
 
     ma_tac_get_energy();//get bkg for factory test get image.
     refresh_interrupt_parameters_timer();
diff --git a/fingerprint/client/libfprint/interface/ca_interface.h b/fingerprint/client/libfprint/interface/ca_interface.h
index a9d9147..389ef65 100644
--- a/fingerprint/client/libfprint/interface/ca_interface.h
+++ b/fingerprint/client/libfprint/interface/ca_interface.h
@@ -15,5 +15,6 @@ int bio_remove(uint32_t gid,uint32_t fid);
 int bio_set_active_group(uint32_t gid,const char *store_path);
 int bio_authenticate(uint64_t operation_id,uint32_t gid);
 int bio_init();
+int bio_enumerate(uint32_t gids[], uint32_t fids[], int *fid_count) ;
 
 #endif
diff --git a/fingerprint/client/libfprint/process/enrollcalibrate.c b/fingerprint/client/libfprint/process/enrollcalibrate.c
index 46b60f7..73e4c69 100644
--- a/fingerprint/client/libfprint/process/enrollcalibrate.c
+++ b/fingerprint/client/libfprint/process/enrollcalibrate.c
@@ -8,6 +8,8 @@
 
 int gMinEnergy = 0x7fffffff;
 
+int enroll_downflag = 0;
+int enroll_upflag = 1;
 /*执行注册校准工作
  * @qe 任务队列元素
  * @return
@@ -50,6 +52,11 @@ void* enrollcalibrate_work(void * q)
         // has finger
         if (!cancelflag && down) {
             // enroll
+            if(enroll_upflag == 1 && enroll_downflag ==0){
+                LOGD("enroll notify finger down\n");
+                acquired_event_notify(FINGERPRINT_ACQUIRED_FINGER_DOWN);
+                enroll_downflag =1;
+            }
             if ( !cancelflag ) {
                 if(presscount > 0) {
                     LOGD(" too fast");
@@ -121,6 +128,13 @@ void* enrollcalibrate_work(void * q)
                 }
                 presscount--;
             }
+
+            if(enroll_downflag == 1){
+                LOGD(" enroll notify finger up \n");
+                acquired_event_notify(FINGERPRINT_ACQUIRED_FINGER_UP);
+                enroll_downflag = 0;
+                enroll_upflag = 1;
+            }
         }
         //has finger
         LOGD("###down %d percentage %d gMinEnergy %d\n",down , percentage, gMinEnergy);
diff --git a/fingerprint/client/libfprint/utils/notify.c b/fingerprint/client/libfprint/utils/notify.c
index fbfd486..431aadd 100644
--- a/fingerprint/client/libfprint/utils/notify.c
+++ b/fingerprint/client/libfprint/utils/notify.c
@@ -17,40 +17,39 @@
 #include "../drivercontroller/driver_controller.h"
 #include "../tac/communicate_tube.h"
 
-fingerprint_notify_t gNotify;//消息通知方法
+#include "notify.h"
+//fingerprint_notify_t gNotify;//消息通知方法
+notify_t gNotify;//消息通知方法
 
 /*记录消息通知方法
  * @notify 消息通知方法
  */
-void set_notify(fingerprint_notify_t notify)
+void set_notify(notify_t notify)
 {
 	gNotify = notify;
 }
 
 void error_notify(uint32_t errornumber)
 {
-	fingerprint_error_t fet;
+/*	fingerprint_error_t fet;
 	fingerprint_msg_t fmsg;
 	fet = errornumber;
 	fmsg.type = FINGERPRINT_ERROR;
 	fmsg.data.error = fet;
 	gNotify(&fmsg);
+*/
 }
 
 void remove_notify(uint32_t gid, uint32_t fid)
 {
-	fingerprint_finger_id_t ffit;
-	fingerprint_removed_t frt;
-	struct fingerprint_msg fmsg;
-	ffit.gid = gid;
-	ffit.fid = fid;
-
-	frt.finger = ffit;
-
-	fmsg.type = FINGERPRINT_TEMPLATE_REMOVED;
-	fmsg.data.removed = frt;
-	gNotify(&fmsg);
-
+    fingerprint_t fp = {
+        .msg = MSG_REMOVE,
+        .fid = 0,
+        .result = fid,
+        .ecode = 0,
+    };
+
+    gNotify(&fp);
 }
 
 /*注册结果通知
@@ -58,24 +57,17 @@ void remove_notify(uint32_t gid, uint32_t fid)
  * @remaining 剩余百分比
  * @msg 提示信息
  */
-void enroll_notify(uint32_t gid, uint32_t fid, int remaining, int msg)
+void enroll_notify(int gid, uint32_t fid, int remaining, int msg)
 {
+    LOGD("enroll notify =====fid =%d, remaining = %d , msg = %d ", fid, remaining, msg);
+    fingerprint_t fp;
+    fp.msg = MSG_ENROLL;
+    fp.fid = fid;
+    fp.result = remaining;
+    fp.ecode = 0;
 
-	struct fingerprint_msg fmsg;
-	fingerprint_finger_id_t ffit;
-	fingerprint_enroll_t fet;
-	ffit.gid = gid;
-	ffit.fid = fid;
-
-	fet.finger = ffit;
-	fet.samples_remaining = remaining;
-	fet.msg = msg;
 
-	fmsg.type = FINGERPRINT_TEMPLATE_ENROLLING;
-	fmsg.data.enroll = fet;
-
-	gNotify(&fmsg);
-	LOGE("fid %u remaining %d\n",fid,remaining);
+	gNotify(&fp);
 
 }
 
@@ -86,31 +78,20 @@ void enroll_notify(uint32_t gid, uint32_t fid, int remaining, int msg)
  */
 void authenticate_notify(uint32_t gid,  uint32_t fid, hw_auth_token_t *token)
 {
-	struct fingerprint_msg fmsg;
-	fingerprint_acquired_t fat;
-	fingerprint_finger_id_t ffit;
-	fingerprint_authenticated_t fat1;
-
-	LOGE("fid %u\n",fid);
-	if (fid) {
-		ma_tac_update_template(gid,fid);
-	}
-	fat.acquired_info = FINGERPRINT_ACQUIRED_GOOD;
-
-	fmsg.type = FINGERPRINT_ACQUIRED;
-	fmsg.data.acquired = fat;
 
-	gNotify(&fmsg);
-
-	ffit.gid = gid;
-	ffit.fid = fid;
+    fingerprint_t fp = {
+        .msg = MSG_MATCH,
+        .fid = 0,
+        .result = fid,
+        .ecode = 0,
+    };
 
-	fat1.finger = ffit;
-	fat1.hat = *token;
-
-	fmsg.type = FINGERPRINT_AUTHENTICATED;
-	fmsg.data.authenticated = fat1;
-	gNotify(&fmsg);
+    if(fid !=0){
+        fp.ecode = 0;
+    }else{
+        fp.ecode = -2;
+    }
+	gNotify(&fp);
 
 	LOGE("end\n");
 }
@@ -120,17 +101,39 @@ void authenticate_notify(uint32_t gid,  uint32_t fid, hw_auth_token_t *token)
  */
 void acquired_event_notify(uint32_t event)
 {
-	fingerprint_acquired_t fat;
-	struct fingerprint_msg fmsg;
-
-	LOGE("start, event=%d\n", event);
-
-	fat.acquired_info = event;
-	fmsg.type = FINGERPRINT_ACQUIRED;
-	fmsg.data.acquired = fat;
-
-	gNotify(&fmsg);
-
+    LOGD("==============================event = %d ",event);
+    fingerprint_t fp;
+
+    fp.fid = 0;
+    fp.result = 0;
+
+    switch(event){
+        case FINGERPRINT_ACQUIRED_DUPLICATE_AREA:
+            fp.msg = MSG_ENROLL ;
+            fp.ecode = FP_DUPLI_AREA;
+
+            break;
+        case FINGERPRINT_ACQUIRED_DUPLICATE_FINGER:
+            fp.msg = MSG_ENROLL ;
+            fp.ecode = FP_DUPLI_FINGER;
+
+            break;
+        case FINGERPRINT_ACQUIRED_LOW_COVER:
+            fp.msg = MSG_ENROLL ;
+            fp.ecode = FP_CHK_PART;
+
+            break;
+        case FINGERPRINT_ACQUIRED_FINGER_DOWN:
+            fp.msg = MSG_ENROLL;
+            fp.ecode = FP_CHK_FULL;
+            break;
+        case FINGERPRINT_ACQUIRED_FINGER_UP:
+            fp.msg = MSG_ENROLL;
+            fp.ecode = FP_CHK_UP;
+            break;
+    }
+
+	gNotify(&fp);
 	LOGE("end\n");
 }
 
diff --git a/fingerprint/client/libfprint/utils/notify.h b/fingerprint/client/libfprint/utils/notify.h
index 36411c6..5c9003f 100644
--- a/fingerprint/client/libfprint/utils/notify.h
+++ b/fingerprint/client/libfprint/utils/notify.h
@@ -10,7 +10,37 @@
 
 #include <hardware/fingerprint.h>
 
-void set_notify(fingerprint_notify_t notify);
+#define FP_CHK_PART           2     //部分接触
+#define FP_DUPLI_AREA      -40      //重复区域
+#define FP_DUPLI_FINGER    -41      //重复手指
+#define FP_CHK_DOWN         1       //手指按下
+#define FP_CHK_FULL         3       //全覆盖
+#define FP_CHK_UP           5       //手指抬起
+
+enum msg_type {
+    MSG_IDLE = 0,
+    MSG_ENROLL,
+    MSG_MATCH,
+    MSG_REMOVE,
+    MSG_CALIBRATE,
+    MSG_TEST_START,
+    MSG_TEST_STOP,
+};
+
+typedef struct fingerprint {
+     int msg;
+     int fid;
+     int result;
+     int ecode;
+} fingerprint_t;
+
+typedef int(*notify_t)(fingerprint_t *fp);
+
+extern void set_notify(notify_t notify);
+
+
+
+//void set_notify(fingerprint_notify_t notify);
 
 void remove_notify(uint32_t gid, uint32_t fid);
 
diff --git a/fingerprint/include/config.h b/fingerprint/include/config.h
index 3672725..b4b129f 100644
--- a/fingerprint/include/config.h
+++ b/fingerprint/include/config.h
@@ -18,7 +18,7 @@
 
 #define DEFAULT_USER_GROUP                          0
 #define DEFAULT_STORAGE_PATH                        "/data/system/users/0/fpdata"
-#define DEFAULT_STORAGE_PROPERTY_PATH               "/data/system/ma_fingerprint"
+#define DEFAULT_STORAGE_PROPERTY_PATH               "/data/data/ma.fprint/files"
 
 enum navigation_result {
     NAVI_NONE          = 0,
diff --git a/fingerprint/include/hw_auth_token.h b/fingerprint/include/hw_auth_token.h
new file mode 100644
index 0000000..c4ddeb4
--- /dev/null
+++ b/fingerprint/include/hw_auth_token.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <stdint.h>
+
+#ifndef ANDROID_HARDWARE_HW_AUTH_TOKEN_H
+#define ANDROID_HARDWARE_HW_AUTH_TOKEN_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif  // __cplusplus
+
+extern const uint8_t HW_AUTH_TOKEN_VERSION;
+
+typedef enum {
+    HW_AUTH_NONE = 0,
+    HW_AUTH_PASSWORD = 1 << 0,
+    HW_AUTH_FINGERPRINT = 1 << 1,
+    // Additional entries should be powers of 2.
+    HW_AUTH_ANY = UINT32_MAX,
+} hw_authenticator_type_t;
+
+/**
+ * Data format for an authentication record used to prove successful authentication.
+ */
+typedef struct __attribute__((__packed__)) {
+    uint8_t version;  // Current version is 0
+    uint64_t challenge;
+    uint64_t user_id;             // secure user ID, not Android user ID
+    uint64_t authenticator_id;    // secure authenticator ID
+    uint32_t authenticator_type;  // hw_authenticator_type_t, in network order
+    uint64_t timestamp;           // in network order
+    uint8_t hmac[32];
+} hw_auth_token_t;
+
+#ifdef __cplusplus
+}  // extern "C"
+#endif  // __cplusplus
+
+#endif  // ANDROID_HARDWARE_HW_AUTH_TOKEN_H
diff --git a/push.sh b/push.sh
new file mode 100644
index 0000000..ce25224
--- /dev/null
+++ b/push.sh
@@ -0,0 +1,14 @@
+#!/bin/sh
+
+adb root
+adb remount
+
+echo "push lib$1 for standard"
+adb push out/client/libs/arm64-v8a/libfprint-x64.so /system/lib64
+adb push out/client/libs/arm64-v8a/libmafprint.so /system/lib64
+adb push out/client/libs/arm64-v8a/libma-fpservice.so /system/lib64
+
+
+echo "adb reboot......"
+adb reboot
+
diff --git a/version/test.csv b/version/test.csv
index 6b208ee..bc68b18 100644
--- a/version/test.csv
+++ b/version/test.csv
@@ -12,6 +12,7 @@ Default,Android,4.0.00,A121_N,Watchtrust,x86_64,Android6.0,Yes,Yes,Yes,No,14,3
 Default,Android,4.0.00,A121_N,Nutlet,arm64-v8a,Android6.0,Yes,Yes,Yes,No,14,3
 Default,Android,4.0.00,A121_N,Microtrust,arm64-v8a,Android6.0,Yes,Yes,Yes,No,14,3
 Default,Android,4.0.00,A83_N,Android,armeabi,Android6.0,Yes,Yes,Yes,No,14,3
+Default,Android,4.0.00,A83_N,Android,arm64-v8a,Android6.0,Yes,Yes,Yes,No,14,3
 Default,Android,4.0.00,A80_T,Android,armeabi,Android6.0,Yes,Yes,Yes,No,14,3
 Default,Android,4.0.00,A80_T&A83_N,Android,armeabi,Android6.0,Yes,Yes,Yes,No,14,3
 Default,Android,4.0.00,A121_N,Android,arm64-v8a,Ali5.1,Yes,Yes,Yes,No,14,3
