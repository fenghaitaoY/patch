diff --git a/fingerprint/client/libfprint/process/authenticate.c b/fingerprint/client/libfprint/process/authenticate.c
index c7b78e5..2288734 100644
--- a/fingerprint/client/libfprint/process/authenticate.c
+++ b/fingerprint/client/libfprint/process/authenticate.c
@@ -139,14 +139,14 @@ static int verify(struct cmd_entry *qe)
 #else
     if (!fid && fid_count && r!=ERROR_DO_NOTHING) {
         dc_send_cmd(TIMEOUT_WAKELOCK);
-        if(ret == ERROR_PALMPRINT) { //掌纹不震动
+        if(ret == ERROR_PALMPRINT || ret == ERROR_FINGER_PARTIAL) { //掌纹不震动
             LOGD("Do not notify for plamprint\n");
         } else {
             authenticate_notify(cmd_auth->gid, fid, &g_bio_context.auth_token);
         }
 
         if(ret == ERROR_FINGER_PARTIAL) {
-            acquired_event_notify(FINGERPRINT_ACQUIRED_PARTIAL);
+            //acquired_event_notify(FINGERPRINT_ACQUIRED_PARTIAL);
         } else if(ret==ERROR_FINGER_DIRTY) {
             dirty_num++;
             acquired_event_notify(FINGERPRINT_ACQUIRED_IMAGER_DIRTY);
@@ -160,12 +160,11 @@ static int verify(struct cmd_entry *qe)
     while (1) {
         if ( qe->cancelled ) {
             LOGD("command cancelled\n");
-
             acquired_event_notify(FINGERPRINT_ACQUIRED_FINGER_UP);
             return 0;
         }
         down = ma_tac_detect_touch(AUTHENTICATE_DETECT);
-        LOGD("down = %d",down);
+        LOGD(" wait finger leave --- down = %d",down);
         if(down==0) {
             break;
         }else if(down == ERROR_FINGER_DIRTY) {
@@ -280,7 +279,7 @@ void* authenticate_work(void *q) {
 
         dc_send_cmd(TIMEOUT_WAKELOCK);
         acquired_event_notify(FINGERPRINT_ACQUIRED_FINGER_DOWN);
-        
+
         gettimeofday(&now,NULL);
         auth_start_timestamp = now.tv_sec * 1000 + now.tv_usec / 1000;
         r = verify(qe);
diff --git a/fingerprint/service/soft_sensor/sensor88/algorithm/finger_detect.c b/fingerprint/service/soft_sensor/sensor88/algorithm/finger_detect.c
index ad8299c..e526425 100644
--- a/fingerprint/service/soft_sensor/sensor88/algorithm/finger_detect.c
+++ b/fingerprint/service/soft_sensor/sensor88/algorithm/finger_detect.c
@@ -176,7 +176,7 @@ static void clahe(u8* imgSrc,u8 *imgRate,u8* imgDst)
 }
 
 //计算梯度
-static void gradxy(u8* imgSrc,u8 *imgRate,int th,double* feat)
+static double gradxy(u8* imgSrc,u8 *imgRate,int th)
 {
 	int i,j;
 	int num = 1;
@@ -198,49 +198,10 @@ static void gradxy(u8* imgSrc,u8 *imgRate,int th,double* feat)
 				grad = sqrt((double)(gradx*gradx+grady*grady));
 
 				if(grad>180) sum ++;
-				if(i >= 2 && i < HEIGHT/2-2 && j >= 2 && j < WIDTH/2-2)
-				{
-					num1++;
-					if(grad>180) sum1 ++;
-				}
-				if(i >= 2 && i < HEIGHT/2-2 && j >= WIDTH/2-2 && j < WIDTH-2)
-				{
-					num2++;
-					if(grad>180) sum2 ++;
-				}
-				if(i >= HEIGHT/2+2 && i < HEIGHT-2 && j >= 2 && j < WIDTH/2-2)
-				{
-					num3++;
-					if(grad>180) sum3 ++;
-				}
-				if(i >= HEIGHT/2+2 && i < HEIGHT-2 && j >= WIDTH/2-2 && j < WIDTH-2)
-				{
-					num4++;
-					if(grad>180) sum4 ++;
-				}
 			}
 		}
     sum = sum*100/num;
-	if(num1>0) sum1 = sum1*100/num1;
-	else sum1=0;
-	if(num2>0) sum2 = sum2*100/num2;
-	else sum2=0;
-	if(num3>0) sum3 = sum3*100/num3;
-	else sum3=0;
-	if(num4>0) sum4 = sum4*100/num4;
-	else sum4=0;
-
-	max=sum1;
-	if(max<sum2) max = sum2;
-	if(max<sum3) max = sum3;
-	if(max<sum4) max = sum4;
-	min=sum1;
-	if(min>sum2) min = sum2;
-	if(min>sum3) min = sum3;
-	if(min>sum4) min = sum4;
-	//printf(" var = %f ",max-min);
-	feat[0] = sum;
-	feat[1] = max-min;
+	return sum;
 }
 
 /* 计算线性度
@@ -296,7 +257,6 @@ static double xianxingdu(u8* imgSrc,u8* imgRate)
 			    for(l=0;l<GLCM_CLASS;l++)
 				    for(k=0;k<GLCM_CLASS;k++)
 				    {
-
 					    if( imgSrc[(i+GLCM_DIS)*WIDTH+j] > TH && (sita[i*WIDTH+j] >=((l-1)*PI/GLCM_CLASS) && sita[i*WIDTH+j] < ((2*(l-1)+1)*PI/2/GLCM_CLASS) )
 						    && (sita[(i+GLCM_DIS)*WIDTH+j] >= ((k-1)*PI/GLCM_CLASS) && sita[(i+GLCM_DIS)*WIDTH+j] < (2*(k-1)+1)*PI/2/GLCM_CLASS) )
 						    PDd1[l*GLCM_CLASS+k] ++ ;
@@ -372,136 +332,9 @@ static double xianxingdu(u8* imgSrc,u8* imgRate)
 	return fea1;
 }
 
-static double oritation(u8* img1,u8* imgRate,double per,u8* ori)
-{
-	int i,j,x,y;
-	double gradx = 0,grady = 0,grad;
-	int D1,D2,D3,D4,D5,D6,D7,D8,V1,V2,V3,V4,max1,max2,count=0,count1=0,temp;
-	unsigned int oricount[9] = {0,0,0,0,0,0,0,0};
-	unsigned int sum[8] = {0,0,0,0,0,0,0,0};
-	double var_ori = 0;
-
-	for(i = 0;i < HEIGHT;i++)
-		for(j = 0;j < WIDTH;j++)
-		{
-			ori[i*WIDTH+j] = 0;
-		}
-
-	for(i = 5;i < HEIGHT-5;i++)
-        for(j = 5;j < WIDTH-5;j++)
-		{
-			if(imgRate[i*WIDTH+j] > 0)
-			{
-				D1 = abs(img1[i*WIDTH+j+3]-img1[i*WIDTH+j]) + abs(img1[i*WIDTH+j+2]-img1[i*WIDTH+j])
-					+ abs(img1[i*WIDTH+j+1]-img1[i*WIDTH+j]) + abs(img1[i*WIDTH+j-1]-img1[i*WIDTH+j])
-					+ abs(img1[i*WIDTH+j-2]-img1[i*WIDTH+j]) + abs(img1[i*WIDTH+j-3]-img1[i*WIDTH+j]) ;
-
-				D2 = abs(img1[(i+2)*WIDTH+j-3]-img1[i*WIDTH+j]) + abs(img1[(i+1)*WIDTH+j-3]-img1[i*WIDTH+j])
-					+ abs(img1[(i+1)*WIDTH+j-2]-img1[i*WIDTH+j]) + abs(img1[(i-1)*WIDTH+j+2]-img1[i*WIDTH+j])
-					+ abs(img1[(i-1)*WIDTH+j+3]-img1[i*WIDTH+j]) + abs(img1[(i-2)*WIDTH+j+3]-img1[i*WIDTH+j]) ;
-
-				D3 = abs(img1[(i+3)*WIDTH+j-3]-img1[i*WIDTH+j]) + abs(img1[(i+2)*WIDTH+j-2]-img1[i*WIDTH+j])
-					+ abs(img1[(i+1)*WIDTH+j-1]-img1[i*WIDTH+j]) + abs(img1[(i-1)*WIDTH+j+1]-img1[i*WIDTH+j])
-					+ abs(img1[(i-2)*WIDTH+j+2]-img1[i*WIDTH+j]) + abs(img1[(i-3)*WIDTH+j+3]-img1[i*WIDTH+j]) ;
-
-                D4 = abs(img1[(i+3)*WIDTH+j-2]-img1[i*WIDTH+j]) + abs(img1[(i+3)*WIDTH+j-1]-img1[i*WIDTH+j])
-					+ abs(img1[(i+2)*WIDTH+j-1]-img1[i*WIDTH+j]) + abs(img1[(i-2)*WIDTH+j+1]-img1[i*WIDTH+j])
-					+ abs(img1[(i-3)*WIDTH+j+1]-img1[i*WIDTH+j]) + abs(img1[(i-3)*WIDTH+j+2]-img1[i*WIDTH+j]) ;
-
-                D5 = abs(img1[(i+3)*WIDTH+j]-img1[i*WIDTH+j]) + abs(img1[(i+2)*WIDTH+j]-img1[i*WIDTH+j])
-					+ abs(img1[(i+1)*WIDTH+j]-img1[i*WIDTH+j]) + abs(img1[(i-1)*WIDTH+j]-img1[i*WIDTH+j])
-					+ abs(img1[(i-2)*WIDTH+j]-img1[i*WIDTH+j]) + abs(img1[(i-3)*WIDTH+j]-img1[i*WIDTH+j]);
-
-                D6 = abs(img1[(i+3)*WIDTH+j+2]-img1[i*WIDTH+j]) + abs(img1[(i+3)*WIDTH+j+1]-img1[i*WIDTH+j])
-					+ abs(img1[(i+2)*WIDTH+j+1]-img1[i*WIDTH+j]) + abs(img1[(i-2)*WIDTH+j-1]-img1[i*WIDTH+j])
-					+ abs(img1[(i-3)*WIDTH+j-1]-img1[i*WIDTH+j]) + abs(img1[(i-3)*WIDTH+j-2]-img1[i*WIDTH+j]) ;
-
-                D7 = abs(img1[(i+3)*WIDTH+j+3]-img1[i*WIDTH+j]) + abs(img1[(i+2)*WIDTH+j+2]-img1[i*WIDTH+j])
-					+ abs(img1[(i+1)*WIDTH+j+1]-img1[i*WIDTH+j]) + abs(img1[(i-1)*WIDTH+j-1]-img1[i*WIDTH+j])
-					+ abs(img1[(i-2)*WIDTH+j-2]-img1[i*WIDTH+j]) + abs(img1[(i-3)*WIDTH+j-3]-img1[i*WIDTH+j]) ;
-
-                D8 = abs(img1[(i+2)*WIDTH+j+3]-img1[i*WIDTH+j]) + abs(img1[(i+1)*WIDTH+j+3]-img1[i*WIDTH+j])
-					+ abs(img1[(i+1)*WIDTH+j+2]-img1[i*WIDTH+j]) + abs(img1[(i-1)*WIDTH+j-2]-img1[i*WIDTH+j])
-					+ abs(img1[(i-1)*WIDTH+j-3]-img1[i*WIDTH+j]) + abs(img1[(i-2)*WIDTH+j-3]-img1[i*WIDTH+j]) ;
-
-                V1 = abs(D1-D5);
-				V2 = abs(D2-D6);
-				V3 = abs(D3-D7);
-				V4 = abs(D4-D8);
-
-				max1 = V1;
-				if (D1 > D5) {
-					ori[i * WIDTH + j] = 5;
-				} else {
-					ori[i * WIDTH + j] = 1;
-				}
-				if (max1 < V2) {
-					max1 = V2;
-					if (D2 > D6) {
-						ori[i * WIDTH + j] = 6;
-					} else {
-						ori[i * WIDTH + j] = 2;
-					}
-				}
-				if (max1 < V3) {
-					max1 = V3;
-					if (D3 > D7) {
-						ori[i * WIDTH + j] = 7;
-					} else {
-						ori[i * WIDTH + j] = 3;
-					}
-				}
-				if (max1 < V4) {
-					max1 = V4;
-					if (D4 > D8) {
-						ori[i * WIDTH + j] = 8;
-					} else {
-						ori[i * WIDTH + j] = 4;
-					}
-				}
-				//printf(" %d ",max1);
-				if(img1[i*WIDTH+j] > 150)
-				{
-					count++;
-					oricount[ori[i*WIDTH+j]-1]++;
-				}
-			}
-		}
-
-	sum[0] = oricount[0]+oricount[7];
-	for(i=1;i<8;i++)
-	{
-		sum[i] = oricount[i]+oricount[i-1];
-	}
-
-	max1=sum[0];
-	for(i=0;i<8;i++)
-	{
-		if(max1<sum[i])
-			max1 = sum[i];
-	}
-
-	sum[0] = oricount[0]+oricount[7]+oricount[1];
-	sum[7] = oricount[7]+oricount[6]+oricount[0];
-	for(i=1;i<7;i++)
-	{
-		sum[i] = oricount[i]+oricount[i-1]+oricount[i+1];
-	}
-	max2=sum[0];
-	for(i=0;i<8;i++)
-	{
-		if(max2<sum[i])
-			max2 = sum[i];
-	}
-
-	//printf("  %f %f ",(double)(max1)/count,(double)(max2)/count);
-
-	return (double)(max2)/count;
-}
-
 /* 描述：区分手指和非手指按压
  * 输入：去完背景后的8位图像
- * return： 0~100手指返回其覆盖率   101 湿手指（部分脏污）  102 非手指，水，脏污   103 掌纹
+ * return： 30~100手指返回其覆盖率   0：无按压     102：非手指，水，脏污   
  *         -1 内存分配失败
  */
 int fp88_finger_detect(u8 *imgIn, u8 *imgTmp)
@@ -513,26 +346,25 @@ int fp88_finger_detect(u8 *imgIn, u8 *imgTmp)
 	u8* imgClahe = imgTmp + WIDTH * HEIGHT;
 	u8* imgRate = imgTmp + 2 * WIDTH * HEIGHT;
 	u8* Oritation = imgTmp + 3 * WIDTH * HEIGHT;
-	double feat[2];
 
 	per = press_percent(imgIn,imgRate);
-	if (per < 10) { //无按压
-		ret = 102;
+	if (per < 50) { //无按压
+		ret = 0;
 		goto end;
 	}
-
+	
     clahe(imgIn,imgRate,imgClahe);
 	meanSmooth(imgClahe, imgSmooth);
 	//save_bmp(savePath,imgSmooth, WIDTH, HEIGHT);
 
-	gradxy(imgSmooth,imgRate,150,feat);
-	//printf("  gra = %f var = %f ",feat[0],feat[1]);
+	gra = gradxy(imgSmooth,imgRate,150);
+	//printf("  gra = %f ",gra);
 
-	if (feat[0] > 40) {
+	if (gra > 40) {
 		ret = per;
 		goto end;
 	}
-	if (feat[0] < 25) {
+	if (gra < 15) {
 		ret = 102;
 		goto end;
 	}
@@ -542,33 +374,16 @@ int fp88_finger_detect(u8 *imgIn, u8 *imgTmp)
 	if(xian == -1)
 		return -1;
 
-	if(feat[0] < 25 && xian < 0.15)
+	if( gra*2+xian*100 < 50 || xian < 0.1)
 	{
 		ret = 102;//非手指，水，脏污
 		goto end;
 	}
-
-	if(xian >= 0.3 || (xian*100+feat[0]) > 65)
-    {
+	else
+	{
 		ret = per;
 		goto end;
 	}
-    if(xian < 0.2)
-    {
-	    ret = 103;//掌纹palm
-		goto end;
-	}
-
-	ori = oritation(imgSmooth,imgRate,per,Oritation);
-	//printf("  ori = %f  ",ori);
-
-	dec = feat[0] + xian*100 + feat[1]- (ori < 0.65 ? 0.65 : ori)*100;
-	//printf("  dec = %f  ",dec);
-
-	if (dec > 5) {
-		ret = per;//掌纹palm
-	}
-	else ret = 103; //手指
 
 end:
 	return ret;
diff --git a/fingerprint/service/soft_sensor/sensor88/wrapper_v2.c b/fingerprint/service/soft_sensor/sensor88/wrapper_v2.c
index 9232c17..13c1b83 100644
--- a/fingerprint/service/soft_sensor/sensor88/wrapper_v2.c
+++ b/fingerprint/service/soft_sensor/sensor88/wrapper_v2.c
@@ -89,7 +89,7 @@ static int algorithm88_authenticate(int *fid_count, uint32_t *fid)
     if (ret == 0) {
     	if(g88_dirty>100) {
     		return (g88_dirty==103)? ERROR_PALMPRINT: ERROR_FINGER_DIRTY;
-    	} else if(g88_dirty<60)  return ERROR_FINGER_PARTIAL;
+    	} else if(g88_dirty<80)  return ERROR_FINGER_PARTIAL;
     	else return SUCCESS;
     } else {
         return SUCCESS;
@@ -176,12 +176,9 @@ static int algorithm88_enroll(void) {
     if (g_config.enable_dirty_check) {
         int dirty = fp88_finger_detect(image, context_get_read_img_buf());
         LOGD("dirty=%d press_ratio=%d\n", dirty, g88_press_ratio);
-        if(dirty<80) { //部分按压
+        if(dirty<60) { //部分按压
             ret = ERROR_ENROLL_PART_TOUCH;
             goto clear;
-        } else if (dirty > 100) {
-            ret = ERROR_FINGER_DIRTY;
-            goto clear;
         }
     }
 
