diff --git a/fingerprint/client/libfprint/Android.mk b/fingerprint/client/libfprint/Android.mk
index a694377..30b2c19 100644
--- a/fingerprint/client/libfprint/Android.mk
+++ b/fingerprint/client/libfprint/Android.mk
@@ -42,9 +42,9 @@ LOCAL_SRC_FILES += \
 endif
 ifeq ($(OEM), Konka)
 ifeq ($(PRODUCT), E2_OVERSEA)
-LOCAL_SRC_FILES += process/screen_status.c
 endif
 endif
+LOCAL_SRC_FILES += process/screen_status.c
 
 LOCAL_ARM_MODE := arm	
 
diff --git a/fingerprint/client/libfprint/include/globalvar.h b/fingerprint/client/libfprint/include/globalvar.h
index 5e2b231..9025a9b 100644
--- a/fingerprint/client/libfprint/include/globalvar.h
+++ b/fingerprint/client/libfprint/include/globalvar.h
@@ -29,6 +29,7 @@ extern hw_auth_token_t *gHat;
 extern microarray_properties_t g_config;
 extern int s_chip_id;
 extern unsigned int g_driver_version;
+extern int g_screen_status;
 
 #ifdef TAC_DEBUG_SAVE_FILE
 extern int g_auth_num;
diff --git a/fingerprint/client/libfprint/interface/ca_interface.c b/fingerprint/client/libfprint/interface/ca_interface.c
index 5e0e802..fa62195 100644
--- a/fingerprint/client/libfprint/interface/ca_interface.c
+++ b/fingerprint/client/libfprint/interface/ca_interface.c
@@ -288,8 +288,8 @@ int bio_init(void)
     ma_tac_get_energy();//get bkg for factory test get image.
     refresh_timer();
 #if defined(PRODUCT_E2_OVERSEA) && defined(OEM_KONKA)
-    start_screen_status_process();
 #endif
+    start_screen_status_process();
 
     if(g_config.cover_type == COVER_S3 && g_config.sid03_key_func == 1) {
         start_process_sid03_interrupt();
@@ -340,8 +340,8 @@ int bio_close(void)
         stop_process_sid03_interrupt();
     }
 #if defined(PRODUCT_E2_OVERSEA) && defined(OEM_KONKA)
-    stop_screen_status_process();
 #endif
+    stop_screen_status_process();
     return 0;
 }
 
diff --git a/fingerprint/client/libfprint/process/navigate.c b/fingerprint/client/libfprint/process/navigate.c
index 934a6bd..3f4b451 100644
--- a/fingerprint/client/libfprint/process/navigate.c
+++ b/fingerprint/client/libfprint/process/navigate.c
@@ -106,6 +106,9 @@ void * navigate_work(void *q)
             LOGD("command cancelled\n");
             return NULL;
         }
+        if(g_screen_status == 0){
+            continue;
+        }
         ma_tac_init_navigate();
         down_count = 0;
         tap_result = NAVI_NONE;
diff --git a/fingerprint/client/libfprint/process/screen_status.c b/fingerprint/client/libfprint/process/screen_status.c
index 15d25a6..4acace5 100644
--- a/fingerprint/client/libfprint/process/screen_status.c
+++ b/fingerprint/client/libfprint/process/screen_status.c
@@ -4,7 +4,7 @@
 
 static int s_thread_exit = 0;
 static pthread_t g_tid_screenstatus;
-
+int g_screen_status = 0;
 #define SCREEN_STATUS_OFF  0
 #define SCREEN_STATUS_ON   1
 
@@ -31,6 +31,7 @@ static void *screen_status_thread(void *p)
                 ma_tac_update_config(&g_config);
                 pop_cmd_leave_factory_test();
             }
+            g_screen_status = 0;
             break;
         case SCREEN_STATUS_ON:
             LOGD("screen on.");
@@ -41,6 +42,7 @@ static void *screen_status_thread(void *p)
                 ma_tac_update_config(&g_config);
                 pop_cmd_leave_factory_test();
             }
+            g_screen_status = 1;
             break;
         default:
             LOGD("get screen status bump.");
diff --git a/fingerprint/include/config.h b/fingerprint/include/config.h
index fc890e1..f7027d5 100644
--- a/fingerprint/include/config.h
+++ b/fingerprint/include/config.h
@@ -138,8 +138,8 @@ enum fp_command_info {
 #define DEFAULT_AUTHENTICATE_LEVEL_A80                  4
 #define DEFAULT_AUTHENTICATE_CHARACTERISTIC_NUM_A80     1
 #define DEFAULT_INTERRUPT_TH_A80                        10
-#define DEFAULT_CK_PERIOD_A80                           1
 #endif
+#define DEFAULT_CK_PERIOD_A80                           1
 
 #ifdef A88
 #define DEFAULT_ENERGY_THRESHOLD_A88                    200
diff --git a/fingerprint/service/soft_sensor/sensor83/Android.mk b/fingerprint/service/soft_sensor/sensor83/Android.mk
index f6f2153..b8a5167 100644
--- a/fingerprint/service/soft_sensor/sensor83/Android.mk
+++ b/fingerprint/service/soft_sensor/sensor83/Android.mk
@@ -9,8 +9,8 @@ LOCAL_SRC_FILES := \
 	algorithm/sensor83_navigate.c \
 	algorithm/check_press.c \
 	algorithm/sensor83_judge_diff_module.c \
-	algorithm/sensor83_judge_finger.c \
 	algorithm/sensor83_press_detect.c \
+	algorithm/sensor83_finger_detect.c \
 	sensor_83.c \
 	sensor_context.c \
 	sensor_wrapper.c 
diff --git a/fingerprint/service/soft_sensor/sensor83/algorithm/algorithm.h b/fingerprint/service/soft_sensor/sensor83/algorithm/algorithm.h
index 1e3f100..8c784a9 100644
--- a/fingerprint/service/soft_sensor/sensor83/algorithm/algorithm.h
+++ b/fingerprint/service/soft_sensor/sensor83/algorithm/algorithm.h
@@ -30,8 +30,9 @@ void checkFullC(int *firstChange, int *preFull, int *fullChange, int *tagFullC,
 int checkUse(u8 *tagCur);
 int fp83_get_var(int *imgRaw, int *imgBkg, unsigned char grey_offset);
 float fp83_diff_module(int* imgBuf1, int *imgBuf2);
-int gradxy(char *impha,int width,int height);
+//int gradxy(char *impha,int width,int height);
 int get_temp_txt(char *temp,int *src,int len);
 int cpress_detet(int *img,int width,int height);
+int finger_detect(u8 *img1);
 
 #endif /* ALGORITHM_H_ */
diff --git a/fingerprint/service/soft_sensor/sensor83/algorithm/sensor83_finger_detect.c b/fingerprint/service/soft_sensor/sensor83/algorithm/sensor83_finger_detect.c
new file mode 100644
index 0000000..1b1de05
--- /dev/null
+++ b/fingerprint/service/soft_sensor/sensor83/algorithm/sensor83_finger_detect.c
@@ -0,0 +1,589 @@
+#include<math.h>
+#include "algorithm.h"
+#define Width 80
+#define Height 128
+#define TH 50
+#define GLCM_DIS 3  //灰度共生矩阵的统计距离  
+#define GLCM_CLASS 8 //计算灰度共生矩阵的图像灰度值等级化  
+#define DBL_EPSILON 1e-016
+typedef unsigned char u8;
+#define IMAGE_SIZE 80*80
+
+double my_ceil(double para){
+    double tmp;
+    if(para >0){
+        tmp = para - (int)para;
+        if(tmp >0){
+            para=(int)(para+1);
+        }else{
+            para = (int)para;
+        }
+    }else{
+        para = (int)para;
+    }
+    return para;
+}
+
+//图像增强
+void clahe(u8* parry)
+{
+	 int i,j,k;
+	 int sum=Height*Width;
+	 int grayCount[256];
+	 float s[256];
+     float s2[256];
+	 int max,min,a;
+	 for(a=0;a<256;a++)
+        grayCount[a]=0;
+	 for(i=2;i<Height-2;i++)
+       for(j=2;j<Width-2;j++)
+	   {
+           int grayValue = parry[i*Width+j];
+           grayCount[grayValue]++;
+	   }
+	 s[0]=(float)grayCount[0]/(float)sum;
+	//灰度转换
+	 for(k=1;k<256;k++)
+	 {
+		 s[k]=s[k-1]+(float)grayCount[k]/(float)sum;
+	 }
+     for (i=0;i<256;i++)
+	 {
+         s2[i] = (int)(255*s[i]+0.5);
+	 }
+      //写入图像
+	  for(i=0;i<Height;i++)
+       for(j=0;j<Width;j++)
+	   {
+		   int value = parry[i*Width+j];
+		   if(value>50)
+		       parry[i*Width+j] = (u8)s2[value];
+		   else
+			   parry[i*Width+j] = 0;
+	   }
+}
+
+void CreatGauss(double sigma, double **pdKernel, int *pnWidowSize)
+{
+    long i;  
+    //数组中心点  
+    int nCenter;  
+    //数组中一点到中心点距离  
+    double dDis;  
+    //中间变量 
+    double dValue; 
+    double dSum;  dSum = 0;  
+    // [-3*sigma,3*sigma] 以内数据，会覆盖绝大部分滤波系数  
+    *pnWidowSize = 1+ 2*my_ceil(3*sigma);  
+    nCenter = (*pnWidowSize)/2;  
+    *pdKernel = (double *) malloc(*pnWidowSize * sizeof(double));  
+    //生成高斯数据 
+    for(i=0;i<(*pnWidowSize);i++)  
+    { 
+        dDis = i - nCenter; 
+        dValue = exp(-(1/2)*dDis*dDis/(sigma*sigma))/(sqrt(2*3.1415926)*sigma);   
+        (*pdKernel)[i] = dValue;   
+        dSum+=dValue;   
+    } 
+    //归一化 
+    for(i=0;i<(*pnWidowSize);i++)  
+        (*pdKernel)[i]/=dSum;   
+}
+
+//用高斯滤波器平滑原图像 
+void GaussianSmooth(u8* pGray, u8* pResult, double sigma) 
+{ 
+    long x, y;  
+	long i;  
+    //高斯滤波器长度  
+	int nWindowSize;  
+    //窗口长度  
+	int nLen;  
+    //一维高斯滤波器  
+	double *pdKernel; 
+    //高斯系数与图像数据的点乘  
+	double dDotMul;   
+    //滤波系数总和  
+    double dWeightSum;   
+    double *pdTemp; 
+
+	long j;
+    //数组中心点  
+	int nCenter;  
+    //数组中一点到中心点距离  
+	double dDis;  
+    //中间变量 
+    double dValue; 
+    double dSum;  dSum = 0;  
+     // [-3*sigma,3*sigma] 以内数据，会覆盖绝大部分滤波系数  
+	nWindowSize = 1+ 2*my_ceil(3*sigma);  
+    nCenter = nWindowSize/2;
+    pdKernel = (double *) malloc(nWindowSize * sizeof(double));  
+    pdTemp = (double*) malloc(Width*Height *sizeof(double));  
+    //产生一维高斯数据 
+    //生成高斯数据 
+    for(i=0;i< nWindowSize;i++)  
+	{ 
+        dDis = i - nCenter; 
+        dValue = exp(-(1/2)*dDis*dDis/(sigma*sigma))/(sqrt(2*3.1415926)*sigma);   
+		pdKernel[i] = dValue;   
+		dSum+=dValue;   
+	} 
+    //归一化 
+    for(i=0;i<nWindowSize;i++)
+        pdKernel[i]/=dSum;
+
+   // CreatGauss(sigma, &pdKernel, &nWindowSize);  
+    nLen = nWindowSize/2;   
+    //x方向滤波 
+    for(y=0;y<Height;y++)  
+	{ 
+      for(x=0;x<Width;x++)   
+	  { 
+         dDotMul = 0;     
+		 dWeightSum = 0; 
+         for(i=(-nLen);i<=nLen;i++)    
+		 { 
+            //判断是否在图像内部 
+            if((i+x)>=0 && (i+x)<Width)     
+			{ 
+               dDotMul+=(double)pGray[y*Width+(i+x)] * pdKernel[nLen+i]; 
+               dWeightSum += pdKernel[nLen+i];    
+			}   
+		 } 
+     pdTemp[y*Width+x] = dDotMul/dWeightSum;  
+	  }  
+	}  
+    //y方向滤波 
+    for(x=0; x<Width;x++)  { 
+       for(y=0; y<Height; y++)   
+	   { 
+          dDotMul = 0;    
+		  dWeightSum = 0;
+              for(i=(-nLen);i<=nLen;i++)    
+			  { 
+                  if((i+y)>=0 && (i+y)< Height)     
+				  { 
+                      dDotMul += (double)pdTemp[(y+i)*Width+x]*pdKernel[nLen+i];      
+					  dWeightSum += pdKernel[nLen+i];     
+				  }    
+			  } 
+          pResult[y*Width+x] = (unsigned char)dDotMul/dWeightSum;   
+	   } 
+	}
+
+    if(pdKernel != NULL){
+        free(pdKernel);
+        pdKernel = NULL;
+    }
+    if(pdTemp != NULL){
+        free(pdTemp);
+        pdTemp = NULL;
+    }
+
+}
+
+//计算灰度共生特征，排除部分硬币，果皮按压
+void calGLCM_one(u8 *img1,double num,double *feat)  
+{  
+    int i,j,w,k,l;
+ 
+    int* glcm0 = (int*)malloc(GLCM_CLASS*GLCM_CLASS*sizeof(int));  
+	int* glcm45 = (int*)malloc(GLCM_CLASS*GLCM_CLASS*sizeof(int));  
+	int* glcm90 = (int*)malloc(GLCM_CLASS*GLCM_CLASS*sizeof(int));  
+	int* glcm135 = (int*)malloc(GLCM_CLASS*GLCM_CLASS*sizeof(int));  
+    int* histImage = (int*)malloc(Width*Height*sizeof(int));  
+    double contrast = 0,homogenity = 0, energy = 0,entropy = 0,var=0,var2=0; 
+	int min,max;
+	//-----------------------灰度共生矩阵求纹理特征---------------------
+	//灰度等级化---分GLCM_CLASS个等级   
+	for(i = 0;i < Height;i++)
+        for(j = 0;j < Width;j++)
+		{
+			histImage[i * Width + j] = (int)(img1[i*Width+j] * GLCM_CLASS / 256);  
+		}
+  
+    //初始化共生矩阵  
+    for (i = 0;i < GLCM_CLASS;i++)  
+        for (j = 0;j < GLCM_CLASS;j++)  
+        {
+            glcm0[i * GLCM_CLASS + j] = 0;  
+            glcm45[i * GLCM_CLASS + j] = 0;  
+		    glcm90[i * GLCM_CLASS + j] = 0;  
+	        glcm135[i * GLCM_CLASS + j] = 0;  
+	    }
+  
+    //计算灰度共生矩阵  
+    //水平方向  
+    for (i = 5;i < Height-5;i++)  
+    {  
+        for (j = 5;j < Width-5;j++)  
+        {  
+            if(img1[i*Width+j] > TH)
+			{
+				l = histImage[i * Width + j];  
+                if(j + GLCM_DIS >= 0 && j + GLCM_DIS < Width)  
+                {  
+                    k = histImage[i * Width + j + GLCM_DIS];  
+                    glcm0[l * GLCM_CLASS + k]++;  
+                }  
+                if(j - GLCM_DIS >= 0 && j - GLCM_DIS < Width)  
+                {  
+                    k = histImage[i * Width + j - GLCM_DIS];  
+                    glcm0[l * GLCM_CLASS + k]++;  
+                }  
+			}
+        }  
+        
+    }  
+    //垂直方向  
+    for (i = 5;i < Height-5;i++)  
+    {  
+        for (j = 5;j < Width-5;j++)  
+        {  
+            if(img1[i*Width+j] > TH)
+			{
+				l = histImage[i * Width + j];  
+                if(i + GLCM_DIS >= 0 && i + GLCM_DIS < Height)   
+                {  
+                    k = histImage[(i + GLCM_DIS) * Width + j];  
+                    glcm90[l * GLCM_CLASS + k]++;  
+                }  
+                if(i - GLCM_DIS >= 0 && i - GLCM_DIS < Height)   
+                {  
+                    k = histImage[(i - GLCM_DIS) * Width + j];  
+                    glcm90[l * GLCM_CLASS + k]++;  
+				}
+            }  
+             
+        }  
+    }  
+    //45度方向  
+    for (i = 5;i < Height-5;i++)  
+    {  
+        for (j = 5;j < Width-5;j++)  
+        {  
+            if(img1[i*Width+j] > TH)
+			{
+				l = histImage[i * Width + j];  
+  
+                if(j + GLCM_DIS >= 0 && j + GLCM_DIS < Width && i + GLCM_DIS >= 0 && i + GLCM_DIS < Height)  
+                {  
+                    k = histImage[(i + GLCM_DIS) * Width + j + GLCM_DIS];  
+                    glcm45[l * GLCM_CLASS + k]++;  
+                }  
+                if(j - GLCM_DIS >= 0 && j - GLCM_DIS < Width && i - GLCM_DIS >= 0 && i - GLCM_DIS < Height)  
+                {  
+                    k = histImage[(i - GLCM_DIS) * Width + j - GLCM_DIS];  
+                    glcm45[l * GLCM_CLASS + k]++;  
+				}
+            }    
+        }  
+    }  
+  
+	//135度方向  
+	for (i = 5;i < Height-5;i++)  
+    {  
+        for (j = 5;j < Width-5;j++)  
+        {     
+			if(img1[i*Width+j] > TH)
+			{
+				l = histImage[i * Width + j];  
+  
+                if(j + GLCM_DIS >= 0 && j + GLCM_DIS < Width && i - GLCM_DIS >= 0 && i - GLCM_DIS < Height)  
+                {  
+                    k = histImage[(i - GLCM_DIS) * Width + j + GLCM_DIS];  
+                    glcm135[l * GLCM_CLASS + k]++;  
+                }  
+                if(j - GLCM_DIS >= 0 && j - GLCM_DIS < Width && i + GLCM_DIS >= 0 && i + GLCM_DIS < Height)  
+                {  
+                    k = histImage[(i + GLCM_DIS) * Width + j - GLCM_DIS];  
+                    glcm135[l * GLCM_CLASS + k]++;  
+                }   
+			}
+        }  
+    }  
+    //计算特征值  
+    for (i = 0;i < GLCM_CLASS;i++)  
+    {  
+        for (j = 0;j < GLCM_CLASS;j++)  
+        {  
+			//对比度  
+            contrast += (i - j) * (i - j) * glcm0[i * GLCM_CLASS + j] + (i - j) * (i - j) * glcm45[i * GLCM_CLASS + j]
+	                 + (i - j) * (i - j) * glcm90[i * GLCM_CLASS + j] + (i - j) * (i - j) * glcm135[i * GLCM_CLASS + j]; 
+			//一致性  
+            homogenity += 1.0 / (1 + (i - j) * (i - j)) * glcm0[i * GLCM_CLASS + j] + 1.0 / (1 + (i - j) * (i - j)) * glcm45[i * GLCM_CLASS + j]
+			           + 1.0 / (1 + (i - j) * (i - j)) * glcm90[i * GLCM_CLASS + j] + 1.0 / (1 + (i - j) * (i - j)) * glcm135[i * GLCM_CLASS + j];  
+			//能量  
+            energy += glcm0[i * GLCM_CLASS + j] * glcm0[i * GLCM_CLASS + j] + glcm45[i * GLCM_CLASS + j] * glcm45[i * GLCM_CLASS + j]
+			       + glcm90[i * GLCM_CLASS + j] * glcm90[i * GLCM_CLASS + j] + glcm135[i * GLCM_CLASS + j] * glcm135[i * GLCM_CLASS + j];  
+            max = glcm0[i * GLCM_CLASS + j];
+			min = glcm0[i * GLCM_CLASS + j];
+		    if(glcm45[i * GLCM_CLASS + j] > max)
+				max = glcm45[i * GLCM_CLASS + j];
+			if(glcm90[i * GLCM_CLASS + j] > max)
+				max = glcm90[i * GLCM_CLASS + j];
+			if(glcm135[i * GLCM_CLASS + j] > max)
+				max = glcm135[i * GLCM_CLASS + j];
+
+			if(glcm45[i * GLCM_CLASS + j] < min)
+				min = glcm45[i * GLCM_CLASS + j];
+			if(glcm90[i * GLCM_CLASS + j] < min)
+				min = glcm90[i * GLCM_CLASS + j];
+			if(glcm135[i * GLCM_CLASS + j] < min)
+				min = glcm135[i * GLCM_CLASS + j];
+
+			var = var + max - min;
+			var2 = ma_abs(glcm0[i * GLCM_CLASS + j]-glcm45[i * GLCM_CLASS + j]) + ma_abs(glcm0[i * GLCM_CLASS + j]-glcm90[i * GLCM_CLASS + j])
+				+ ma_abs(glcm0[i * GLCM_CLASS + j]-glcm135[i * GLCM_CLASS + j]) + ma_abs(glcm45[i * GLCM_CLASS + j]-glcm90[i * GLCM_CLASS + j])
+				+ ma_abs(glcm90[i * GLCM_CLASS + j]-glcm135[i * GLCM_CLASS + j]);
+        }  
+    } 
+    
+	feat[0] = var/num;
+	feat[1] = var2/num;
+	feat[2] = energy/num/100000;
+	feat[3] = homogenity/num;//
+	feat[4] = contrast/num;
+
+    if(glcm0 != NULL){
+        free(glcm0);
+        glcm0 = NULL;
+    }
+    if(glcm45 != NULL){
+        free(glcm45);
+        glcm45 = NULL;
+    }
+    if(glcm90 != NULL){
+        free(glcm90);
+        glcm90 = NULL;
+    }
+    if(glcm135 != NULL){
+        free(glcm135);
+        glcm135 = NULL;
+    }
+    if(histImage != NULL){
+        free(histImage);
+        histImage = NULL;
+    }
+}
+//计算梯度，排除部分硬币，果皮按压
+void gradxy(u8*img1,u8 *img2,double *feat)
+{
+	int i,j;
+	int num = 0;
+	double gradx = 0,grady = 0,grad;
+	double sum = 0;
+	
+	for(i = 5;i < Height-5;i++)
+        for(j = 5;j < Width-5;j++)
+		{
+			if(img1[i*Width+j] > 90)
+			{
+			    num ++;		
+
+
+				grad = ma_abs(img2[(i+1)*Width+j] - img2[i*Width+j]) ;
+				if(grad>10)
+					sum ++;
+			}
+		}
+    sum = sum*100/num;
+	feat[5] = sum;
+}
+
+//计算方向，排除平行纹（方向一致性高）
+void oritation(u8*img1,double *feat)
+{
+	int i,j;
+	double gradx = 0,grady = 0,grad;
+	int D1,D2,D3,D4,D5,D6,D7,D8,V1,V2,V3,V4,max1,max2,count=0,count1=0;
+	u8* ori = (u8*)malloc(Width*Height*sizeof(u8));
+	int var_ori = 0;
+	
+	for(i = 0;i < Height;i++)
+        for(j = 0;j < Width;j++)
+		{
+			ori[i*Width+j] = 0;
+		}
+		
+	for(i = 10;i < Height-10;i++)
+        for(j = 10;j < Width-10;j++)
+		{
+			if(img1[i*Width+j] > 0)
+			{
+				count1 ++;		
+
+				D1 = ma_abs(img1[i*Width+j+4]-img1[i*Width+j]) + ma_abs(img1[i*Width+j+3]-img1[i*Width+j]) 
+					+ ma_abs(img1[i*Width+j+2]-img1[i*Width+j]) + ma_abs(img1[i*Width+j+1]-img1[i*Width+j]) 
+				    + ma_abs(img1[i*Width+j-1]-img1[i*Width+j]) + ma_abs(img1[i*Width+j-2]-img1[i*Width+j]) 
+					+ ma_abs(img1[i*Width+j-3]-img1[i*Width+j]) + ma_abs(img1[i*Width+j-4]-img1[i*Width+j]) ;
+				D2 = ma_abs(img1[(i+2)*Width+j-4]-img1[i*Width+j]) + ma_abs(img1[(i+2)*Width+j-3]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i+1)*Width+j-3]-img1[i*Width+j]) + ma_abs(img1[(i+1)*Width+j-2]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i-1)*Width+j+2]-img1[i*Width+j]) + ma_abs(img1[(i-1)*Width+j+3]-img1[i*Width+j]) 
+					+ ma_abs(img1[(i-2)*Width+j+3]-img1[i*Width+j]) + ma_abs(img1[(i-2)*Width+j+4]-img1[i*Width+j]);
+				D3 = ma_abs(img1[(i+4)*Width+j-4]-img1[i*Width+j]) + ma_abs(img1[(i+3)*Width+j-3]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i+2)*Width+j-2]-img1[i*Width+j]) + ma_abs(img1[(i+1)*Width+j-1]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i-1)*Width+j+1]-img1[i*Width+j]) + ma_abs(img1[(i-2)*Width+j+2]-img1[i*Width+j]) 
+					+ ma_abs(img1[(i-3)*Width+j+3]-img1[i*Width+j]) + ma_abs(img1[(i-4)*Width+j+4]-img1[i*Width+j]);
+                D4 = ma_abs(img1[(i+4)*Width+j-2]-img1[i*Width+j]) + ma_abs(img1[(i+3)*Width+j-2]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i+3)*Width+j-1]-img1[i*Width+j]) + ma_abs(img1[(i+2)*Width+j-1]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i-2)*Width+j+1]-img1[i*Width+j]) + ma_abs(img1[(i-3)*Width+j+1]-img1[i*Width+j]) 
+					+ ma_abs(img1[(i-3)*Width+j+2]-img1[i*Width+j]) + ma_abs(img1[(i-4)*Width+j+2]-img1[i*Width+j]);
+                D5 = ma_abs(img1[(i+4)*Width+j]-img1[i*Width+j]) + ma_abs(img1[(i+3)*Width+j]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i+2)*Width+j]-img1[i*Width+j]) + ma_abs(img1[(i+1)*Width+j]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i-1)*Width+j]-img1[i*Width+j]) + ma_abs(img1[(i-2)*Width+j]-img1[i*Width+j]) 
+					+ ma_abs(img1[(i-3)*Width+j]-img1[i*Width+j]) + ma_abs(img1[(i-4)*Width+j]-img1[i*Width+j]);
+                D6 = ma_abs(img1[(i+4)*Width+j+2]-img1[i*Width+j]) + ma_abs(img1[(i+3)*Width+j+2]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i+3)*Width+j+1]-img1[i*Width+j]) + ma_abs(img1[(i+2)*Width+j+1]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i-2)*Width+j-1]-img1[i*Width+j]) + ma_abs(img1[(i-3)*Width+j-1]-img1[i*Width+j]) 
+					+ ma_abs(img1[(i-3)*Width+j-2]-img1[i*Width+j]) + ma_abs(img1[(i-4)*Width+j-2]-img1[i*Width+j]);
+                D7 = ma_abs(img1[(i+4)*Width+j+4]-img1[i*Width+j]) + ma_abs(img1[(i+3)*Width+j+3]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i+2)*Width+j+2]-img1[i*Width+j]) + ma_abs(img1[(i+1)*Width+j+1]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i-1)*Width+j-1]-img1[i*Width+j]) + ma_abs(img1[(i-2)*Width+j-2]-img1[i*Width+j]) 
+					+ ma_abs(img1[(i-3)*Width+j-3]-img1[i*Width+j]) + ma_abs(img1[(i-4)*Width+j-4]-img1[i*Width+j]);
+                D8 = ma_abs(img1[(i+2)*Width+j+4]-img1[i*Width+j]) + ma_abs(img1[(i+2)*Width+j+3]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i+1)*Width+j+3]-img1[i*Width+j]) + ma_abs(img1[(i+1)*Width+j+2]-img1[i*Width+j]) 
+				    + ma_abs(img1[(i-1)*Width+j-2]-img1[i*Width+j]) + ma_abs(img1[(i-1)*Width+j-3]-img1[i*Width+j]) 
+					+ ma_abs(img1[(i-2)*Width+j-3]-img1[i*Width+j]) + ma_abs(img1[(i-2)*Width+j-4]-img1[i*Width+j]);
+
+                V1 = ma_abs(D1-D5);
+				V2 = ma_abs(D2-D6);
+				V3 = ma_abs(D3-D7);
+				V4 = ma_abs(D4-D8);
+				
+				max1 = V1;
+				if(D1>D5)
+				{
+					ori[i*Width+j] = 5;
+				}
+				else
+				{
+					ori[i*Width+j] = 1;  
+				}
+				if(max1<V2)
+				{
+					max1 = V2;
+					if(D2>D6)
+					{
+						ori[i*Width+j] = 6;
+					}
+					else
+					{
+						ori[i*Width+j] = 2;
+					}
+				}
+				if(max1<V3)
+				{
+					max1 = V3;
+					if(D3>D7)
+					{
+						ori[i*Width+j] = 7;
+					}
+					else
+					{
+						ori[i*Width+j] = 3;
+					}
+				}
+				if(max1<V4)
+				{
+					max1 = V4;
+					if(D4>D8)
+					{
+						ori[i*Width+j] = 8;
+					}
+					else
+					{
+						ori[i*Width+j] = 4;
+					}
+				}	
+			}
+		}
+
+	for(i = 11;i < Height-11;i++)
+        for(j = 11;j < Width-11;j++)
+		{
+			if(ori[i*Width+j] > 0)
+			{
+				if(ori[i*Width+j-1] > 0)
+				    var_ori += ma_abs(ori[i*Width+j] - ori[i*Width+j-1]) > 5 ? 1 : ma_abs(ori[i*Width+j] - ori[i*Width+j-1])*ma_abs(ori[i*Width+j] - ori[i*Width+j-1]);
+				else
+					var_ori += (ori[i*Width+j] - ori[i*Width+j-1])*(ori[i*Width+j] - ori[i*Width+j-1]);
+				if(ori[i*Width+j+1] > 0)
+				    var_ori += ma_abs(ori[i*Width+j] - ori[i*Width+j+1]) > 5 ? 1 : ma_abs(ori[i*Width+j] - ori[i*Width+j+1])*ma_abs(ori[i*Width+j] - ori[i*Width+j+1]);
+		        else
+					var_ori += (ori[i*Width+j] - ori[i*Width+j+1])*(ori[i*Width+j] - ori[i*Width+j+1]);
+				if(ori[(i-1)*Width+j] > 0)
+				    var_ori += ma_abs(ori[i*Width+j] - ori[(i-1)*Width+j]) > 5 ? 1 : ma_abs(ori[i*Width+j] - ori[(i-1)*Width+j])*ma_abs(ori[i*Width+j] - ori[(i-1)*Width+j]);
+				else
+					var_ori += (ori[i*Width+j] - ori[(i-1)*Width+j])*(ori[i*Width+j] - ori[(i-1)*Width+j]);
+				if(ori[(i+1)*Width+j] > 0)
+				    var_ori += ma_abs(ori[i*Width+j] - ori[(i+1)*Width+j]) > 5 ? 1 : ma_abs(ori[i*Width+j] - ori[(i+1)*Width+j])*ma_abs(ori[i*Width+j] - ori[(i+1)*Width+j]);
+				else
+					var_ori += (ori[i*Width+j] - ori[(i+1)*Width+j])*(ori[i*Width+j] - ori[(i+1)*Width+j]);
+			}
+		}
+    feat[6] = (double)(var_ori)/count1;
+    if(ori != NULL){
+        free(ori);
+        ori = NULL;
+    }
+}
+
+//描述：区分手指和非手指按压（平行纹，果皮，静电，汗液，硬币，水滴）
+//输入：去完背景后的8位图像
+//return：0 非手指   1 手指
+int finger_detect(u8 *img1)
+{
+	int i,j,num=0;
+	double per;
+	double *feat = NULL; //(double*)malloc(9*sizeof(double));
+	u8* img2 = NULL; //(u8*)malloc(Width*Height*sizeof(u8));
+	double dec;
+
+	clahe(img1);
+	//计算覆盖率，不管是什么
+	for(i = 5;i < Height-5;i++)
+        for(j = 5;j < Width-5;j++)
+		{
+			if(img1[i*Width+j] > TH)
+			{
+				num ++;
+			}
+		}
+	per = (double)num*100/(Width-10)/(Height-10);
+
+	if(per<70)
+	{
+		return 0;
+	}
+
+	feat = (double*)malloc(9*sizeof(double));
+	img2 = (u8*)malloc(Width*Height*sizeof(u8));
+
+	GaussianSmooth(img1,img2,0.3);  
+
+	calGLCM_one(img1,per,feat);
+	oritation(img1,feat);
+	gradxy(img1,img2,feat);
+
+	if(feat[0] < 50 || feat[6]>15)
+		dec = 0;
+	else
+	{
+	   dec = (double)(feat[0] - 70)/5 + (double)(450 - feat[3])/150 
+		+ (double)(feat[4] - 1500)/100 + (double)(feat[5] - 25)/3 + (double)(15 - feat[6])*3;    
+	}
+    if(feat != NULL){
+        free(feat);
+        feat = NULL;
+    }
+    if(img2 != NULL){
+        free(img2);
+        img2 = NULL;
+    }
+	if(dec>10)
+	    return 1; 
+	else
+		return 0;
+}
diff --git a/fingerprint/service/soft_sensor/sensor83/sensor_wrapper.c b/fingerprint/service/soft_sensor/sensor83/sensor_wrapper.c
index ed3ecd1..b7d398b 100644
--- a/fingerprint/service/soft_sensor/sensor83/sensor_wrapper.c
+++ b/fingerprint/service/soft_sensor/sensor83/sensor_wrapper.c
@@ -450,21 +450,21 @@ static int algorithm83_press_detect_texture(void *image, int type) {
 	    ret = (sratio > 25) ? NORMAL_PRESSED : NORMAL_UNPRESSED;
 	    break;
 	}
-//	if (ret == NORMAL_PRESSED) {
-//		fp83_remove_bkg(image_in, context_get_sensor83_bkg(),
-//			g_auth_ctx->remove_bkg_img, g_enroll_ctx->proc_buf, g_sensor83_grey_offset);
-//		if ((count - g_enroll_ctx->max_count) > (SIZE - g_enroll_ctx->max_count) / 10) {
-//			memcpy(g_enroll_ctx->max_image, image_in, sizeof(g_enroll_ctx->max_image));
-//			g_enroll_ctx->max_count = count;
-//		}
-//	} else {
-//	    s_cnt_base = 0;
-//	    s_cnt_img = 0;
-//	    g_enroll_ctx->max_count = 0;
-//	    memset(g_enroll_ctx->max_image, 0, sizeof(g_enroll_ctx->max_image));
-//	}
-
-	if(type==AUTHENTICATE_DETECT) {
+	if (ret == NORMAL_PRESSED) {
+		fp83_remove_bkg(image_in, context_get_sensor83_bkg(),
+			g_auth_ctx->remove_bkg_img, g_enroll_ctx->proc_buf, g_sensor83_grey_offset);
+		if ((count - g_enroll_ctx->max_count) > (SIZE - g_enroll_ctx->max_count) / 10) {
+			memcpy(g_enroll_ctx->max_image, image_in, sizeof(g_enroll_ctx->max_image));
+			g_enroll_ctx->max_count = count;
+		}
+	} else {
+	    s_cnt_base = 0;
+	    s_cnt_img = 0;
+	    g_enroll_ctx->max_count = 0;
+	    memset(g_enroll_ctx->max_image, 0, sizeof(g_enroll_ctx->max_image));
+	}
+
+/*	if(type==AUTHENTICATE_DETECT) {
 		ret = select_image(sratio, image_in);
 	} else {
 		if(ret==NORMAL_PRESSED) {
@@ -476,7 +476,10 @@ static int algorithm83_press_detect_texture(void *image, int type) {
 			}
 		}
 	}
-
+*/
+    if(finger_detect(g_auth_ctx->remove_bkg_img) == 0){
+        ret = NORMAL_UNPRESSED;
+    }
 	LOGD("count=%d ratio=%d, ret=%d grey offset=0x%x\n", count, sratio, ret, g_sensor83_grey_offset);
 
 	return ret;
@@ -636,7 +639,7 @@ static int algorithm83_authenticate(int *fid_count, uint32_t *fid) {
 		match_save_bmp(ret, char_num);
 	    LOGE("extract character fail.");
 	}
-    get_temp_txt(img_temp,s_img_temp,sizeof(img_temp));
+    /*get_temp_txt(img_temp,s_img_temp,sizeof(img_temp));
     if(gradxy(img_temp,32,20) == 0){
         LOGD("not a finger");
         memset(g_enroll_ctx->max_image, 0, sizeof(g_enroll_ctx->max_image));
@@ -644,6 +647,14 @@ static int algorithm83_authenticate(int *fid_count, uint32_t *fid) {
         return ERROR_EXTRACT_FAIL;
     }else{
         LOGD("is a finger");
+    }*/
+    if(finger_detect(g_auth_ctx->remove_bkg_img) == 0){
+        LOGD("not a finger");
+        memset(g_enroll_ctx->max_image, 0, sizeof(g_enroll_ctx->max_image));
+        memset(g_auth_ctx->remove_bkg_img, 0, sizeof(g_auth_ctx->remove_bkg_img));
+        return ERROR_EXTRACT_FAIL;
+    }else{
+        LOGD(" is a finger");
     }
 #ifdef SAVE83_FILE
     {
@@ -693,7 +704,7 @@ match_again:
 	} else {
 		if (isMult == 1) {
 			isMult = 0;
-			goto match_again;
+			//goto match_again;
 		} else { //最后一次尝试失败打印
             match_save_bmp(ret, char_num);
 			LOGD("score=%d, char_num=%d, matchArea=%d score_th=%d, ratio=%d\n",
@@ -788,14 +799,21 @@ static int algorithm83_enroll(void) {
 	memcpy(g_auth_ctx->remove_bkg_img, enroll_image, IMAGE_SIZE);
 	char_num = alg83_extract(g_auth_ctx->remove_bkg_img, s_img_temp);
 	enroll_save_bmp(char_num);
-    get_temp_txt(img_temp,s_img_temp,sizeof(img_temp));
+    /*get_temp_txt(img_temp,s_img_temp,sizeof(img_temp));
 	if (char_num < 1 || gradxy(img_temp,32,20) == 0) {
 		LOGD("extract failed. char_num=%d\n", char_num);
 		s_update_flag = 1;
 		g_enroll_ctx->max_count = 0;
 		memset(g_enroll_ctx->max_image, 0, sizeof(g_enroll_ctx->max_image));
 		return ERROR_EXTRACT_FAIL;
-	}
+	}*/
+    if(finger_detect(g_auth_ctx->remove_bkg_img) == 0){
+        LOGD("not a finger");
+        memset(g_enroll_ctx->max_image, 0, sizeof(g_enroll_ctx->max_image));
+        memset(g_auth_ctx->remove_bkg_img, 0, sizeof(g_auth_ctx->remove_bkg_img));
+        return ERROR_EXTRACT_FAIL;
+    }
+
 	if (g_config.filter_duplicate_enroll) {
 		s_duplicate = 1;
 		algorithm83_authenticate(&fid_count, &auth_fid);
