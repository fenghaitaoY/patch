diff --git a/fingerprint/service/soft_sensor/sensor83/Android.mk b/fingerprint/service/soft_sensor/sensor83/Android.mk
index b25383f..2c230cf 100644
--- a/fingerprint/service/soft_sensor/sensor83/Android.mk
+++ b/fingerprint/service/soft_sensor/sensor83/Android.mk
@@ -8,6 +8,9 @@ LOCAL_SRC_FILES := \
 	algorithm/sensor83_calibrate.c \
 	algorithm/sensor83_navigate.c \
 	algorithm/check_press.c \
+	algorithm/sensor83_judge_diff_module.c \
+	algorithm/sensor83_judge_finger.c \
+	algorithm/sensor83_press_detect.c \
 	sensor_83.c \
 	sensor_context.c \
 	sensor_wrapper.c \ 
diff --git a/fingerprint/service/soft_sensor/sensor83/algorithm/algorithm.h b/fingerprint/service/soft_sensor/sensor83/algorithm/algorithm.h
index 7199aff..5f932c0 100644
--- a/fingerprint/service/soft_sensor/sensor83/algorithm/algorithm.h
+++ b/fingerprint/service/soft_sensor/sensor83/algorithm/algorithm.h
@@ -29,5 +29,9 @@ int fp83_get_center(int* imgRawBuf, int* imgBkgBuf, u8 *pBlock, int *tmpCenter);
 void checkFullC(int *firstChange, int *preFull, int *fullChange, int *tagFullC, int tmpCur);
 int checkUse(u8 *tagCur);
 int fp83_get_var(int *imgRaw, int *imgBkg, unsigned char grey_offset);
+float fp83_diff_module(int* imgBuf1, int *imgBuf2);
+int gradxy(char *impha,int width,int height);
+int get_temp_txt(char *temp,int *src,int len);
+int press_detect(int *img,int width,int height);
 
 #endif /* ALGORITHM_H_ */
diff --git a/fingerprint/service/soft_sensor/sensor83/algorithm/sensor83_judge_diff_module.c b/fingerprint/service/soft_sensor/sensor83/algorithm/sensor83_judge_diff_module.c
new file mode 100644
index 0000000..790fadc
--- /dev/null
+++ b/fingerprint/service/soft_sensor/sensor83/algorithm/sensor83_judge_diff_module.c
@@ -0,0 +1,58 @@
+/*
+ * judge_diff_module.c
+ *
+ *  Created on: Aug 8, 2017
+ *      Author: zhl
+ * 判定图像imgBuf1 和 imgBuf2是否属于同一颗模组 
+ * imgBuf1 和 imgBuf2为关驱动采集到的空采图像
+ * 返回两副图像的相关系数ret
+ * @return -1:图像采集错误，重采
+ *         >=0.81：属于同一颗
+ *         else: 不属于同一颗
+ */
+
+float fp83_diff_module(int* imgBuf1, int *imgBuf2)
+{
+    long long sum1, sum2, sum11, sum12, sum22;
+    long long sumUper, tmp1, tmp2;
+    int adr;
+    int *pBuf1, *pBuf2;
+    float ret;
+    sum1 = 0;
+    sum2 = 0;
+    sum11 = 0;
+    sum12 = 0;
+    sum22 = 0;
+
+    for(adr=0,pBuf1=imgBuf1,pBuf2=imgBuf2; adr<10240; adr+=8,pBuf1+=8,pBuf2+=8)
+    {
+        sum1 += ( (long long)pBuf1[0] + (long long)pBuf1[1] + (long long)pBuf1[2] + (long long)pBuf1[3] +
+                  (long long)pBuf1[4] + (long long)pBuf1[5] + (long long)pBuf1[6] + (long long)pBuf1[7] );
+
+        sum2 += ( (long long)pBuf2[0] + (long long)pBuf2[1] + (long long)pBuf2[2] + (long long)pBuf2[3] +
+                  (long long)pBuf2[4] + (long long)pBuf2[5] + (long long)pBuf2[6] + (long long)pBuf2[7] );
+
+        sum11 += ( (long long)pBuf1[0]*(long long)pBuf1[0] + (long long)pBuf1[1]*(long long)pBuf1[1] +
+                   (long long)pBuf1[2]*(long long)pBuf1[2] + (long long)pBuf1[3]*(long long)pBuf1[3] +
+                   (long long)pBuf1[4]*(long long)pBuf1[4] + (long long)pBuf1[5]*(long long)pBuf1[5] +
+                   (long long)pBuf1[6]*(long long)pBuf1[6] + (long long)pBuf1[7]*(long long)pBuf1[7] );
+
+        sum12 += ( (long long)pBuf1[0]*(long long)pBuf2[0] + (long long)pBuf1[1]*(long long)pBuf2[1] +
+                   (long long)pBuf1[2]*(long long)pBuf2[2] + (long long)pBuf1[3]*(long long)pBuf2[3] +
+                   (long long)pBuf1[4]*(long long)pBuf2[4] + (long long)pBuf1[5]*(long long)pBuf2[5] +
+                   (long long)pBuf1[6]*(long long)pBuf2[6] + (long long)pBuf1[7]*(long long)pBuf2[7] );
+
+        sum22 += ( (long long)pBuf2[0]*(long long)pBuf2[0] + (long long)pBuf2[1]*(long long)pBuf2[1] +
+                   (long long)pBuf2[2]*(long long)pBuf2[2] + (long long)pBuf2[3]*(long long)pBuf2[3] +
+                   (long long)pBuf2[4]*(long long)pBuf2[4] + (long long)pBuf2[5]*(long long)pBuf2[5] +
+                   (long long)pBuf2[6]*(long long)pBuf2[6] + (long long)pBuf2[7]*(long long)pBuf2[7] );
+    }
+
+    sumUper = sum12 - sum1*sum2/10240;
+    tmp1 = sum11 - sum1*sum1/10240;
+    tmp2 = sum22 - sum2*sum2/10240;
+    if(tmp1==0 || tmp2==0)
+        return -1;
+    ret = (float)((double)sumUper/(double)tmp1) * (float)((double)sumUper/(double)tmp2);
+    return ret;
+}
diff --git a/fingerprint/service/soft_sensor/sensor83/algorithm/sensor83_judge_finger.c b/fingerprint/service/soft_sensor/sensor83/algorithm/sensor83_judge_finger.c
new file mode 100644
index 0000000..1e6152b
--- /dev/null
+++ b/fingerprint/service/soft_sensor/sensor83/algorithm/sensor83_judge_finger.c
@@ -0,0 +1,144 @@
+#include <stdlib.h>
+#include "sensor_wrapper.h"
+#include "algorithm/algorithm.h"
+#include "sensor_context.h"
+#include "sensor_83.h"
+#include "sensor83_config.h"
+#include <math.h>
+
+
+#define TH 1000
+
+int gradxy(char *impha,int width,int height)
+{
+    int i,j,per;
+	int num_pha = 0;
+	int value = 0;
+	double sum1 = 0,sum2 = 0;
+	double sum;
+	//计算覆盖率，不管是什么
+	for(i = 0;i < height;i++)
+        for(j = 0;j < width;j++)
+		{
+			value = 0;
+			if(impha[i*width+j] < 5)
+			{
+				value = (impha[i*width+j-1] > 5) + (impha[i*width+j+1] > 5) + (impha[(i+1)*width+j] > 5) + (impha[(i-1)*width+j] > 5);
+				if(value>2)
+				{
+					num_pha ++;
+				}
+			}
+			else num_pha ++;
+		}
+	per = 100*(double)num_pha/(width*height);
+	//无按压或按压面积很小
+	if( per < 10)
+	{
+		return 0;
+	}
+	//二值化
+	for(i = 0;i < height;i++)
+        for(j = 0;j < width;j++)
+		{
+			if(impha[i*width+j] < 140)
+				impha[i*width+j] = 0;
+			else
+				impha[i*width+j] = 255;
+		}
+	for(i = 1;i < height-1;i++)
+        for(j = 1;j < width-1;j++)
+		{
+			if( (impha[i*width+j] == 255) && (impha[i*width+j-1] == 0 && impha[i*width+j+1] == 0 
+				&& impha[(i-1)*width+j] == 0 && impha[(i+1)*width+j] == 0 && impha[(i+1)*width+j-1] == 0 && impha[(i+1)*width+j+1] == 0
+				&& impha[(i-1)*width+j-1] == 0 && impha[(i-1)*width+j+1] == 0) )
+				impha[i*width+j] = 0;
+		}
+
+	for(i = 0;i < height-1;i++)
+        for(j = 0;j < width-1;j++)
+		{
+			sum1 = sum1 + (abs(impha[i*width+j+1] - impha[i*width+j]));
+			sum2 = sum2	+ (abs(impha[(i+1)*width+j] - impha[i*width+j]));
+		}
+    sum = sqrt((double)sum1*sum1+sum2*sum2)/per;
+	if(sum>1000)
+	    return per;
+	else
+		return 0;
+}
+
+
+
+static void to_str(char *des, unsigned char *src, int slen) {
+     int i, len;
+ 
+     memset(des, 0, sizeof(des));
+     for(i=4; i<slen-4; i++) {
+         len = strlen(des);
+         if(i<slen-1) {
+             sprintf(des+len, "%.2x ", src[i]);
+         } else {
+             sprintf(des+len, "%.2x\n", src[i]);
+         }
+     }
+     len = strlen(des);
+     //LOGD("%s: slen=%d len=%d des:%s", __func__, slen, len, des);
+}
+
+
+int get_temp_txt(char *temp,int *src,int len){
+    union temp_int{
+        struct temp_dat{
+         unsigned char ori;
+         unsigned char freq;
+         unsigned char pha;
+         unsigned char amp;
+        }blk;
+        int num;
+    }dat;
+    int i,j,k;
+    unsigned char ori[len];
+    unsigned char freq[len];
+    unsigned char pha[len];
+    unsigned char amp[len];
+    
+    char buf[2048];
+    
+    for(i=0;i<len;i++){
+        dat.num=src[i];
+        ori[i]=dat.blk.ori;
+        freq[i]=dat.blk.freq;
+        pha[i]=dat.blk.pha;
+        amp[i]=dat.blk.amp;
+    }
+    
+    to_str(buf,ori,64);
+    for(i=0;i<40;i++){
+        to_str(buf,amp+64+i*40,40);
+    }
+    
+    
+    to_str(buf,freq,64);
+     for(i=0;i<40;i++){
+        to_str(buf,freq+64+i*40,40);
+    }
+    
+     to_str(buf,pha,64);
+
+    // remove high pre 10 end 10 left 4 right 4
+    k=0;
+    for(i=10; i<30; i++) {
+		for(j=4; j<36; j++) {
+			temp[k++] = pha[i*40+j+64];
+		}
+	}
+    
+    
+     to_str(buf,amp,64);
+     for(i=0;i<40;i++){
+        to_str(buf,amp+64+i*40,40);
+    }
+
+    return 0;
+}
diff --git a/fingerprint/service/soft_sensor/sensor83/algorithm/sensor83_press_detect.c b/fingerprint/service/soft_sensor/sensor83/algorithm/sensor83_press_detect.c
new file mode 100644
index 0000000..5698b8a
--- /dev/null
+++ b/fingerprint/service/soft_sensor/sensor83/algorithm/sensor83_press_detect.c
@@ -0,0 +1,44 @@
+#include <math.h>
+
+
+#define TH 10000
+
+//  输入:  
+//           int *img 源图像
+//  返回:    
+//           1：有按压，0：无按压
+int cpress_detet(int *img,int width,int height)
+{
+	int i,j;
+	double sum1 = 0,sum2 = 0;
+	double sum;
+	int max = 0;
+	
+	for(i = 2;i < height-2;i++)
+        for(j = 2;j < width-2;j++)
+		{
+			if(img[i*width+j] > max)
+			{
+				max = img[i*width+j];
+			}
+		}
+	//灰度等级化
+    for(i = 0;i < height;i++)
+        for(j = 0;j < width;j++)
+        {  
+            img[i*width+j] = (int)(img[i*width+j] * 256 / (max+1));  
+        }  
+	for(i = 2;i < height-2;i++)
+        for(j = 2;j < width-2;j++)
+		{
+			sum1 = sum1 + (abs(img[i*width+j+1] - img[i*width+j]))/8;
+			sum2 = sum2	+ (abs(img[(i+1)*width+j] - img[i*width+j]))/8;
+		}
+   
+    sum = sqrt((double)sum1*sum1+sum2*sum2);
+	
+	if(sum<TH)
+	    return 1;
+	else
+		return 0;
+}
diff --git a/fingerprint/service/soft_sensor/sensor83/sensor_83.c b/fingerprint/service/soft_sensor/sensor83/sensor_83.c
index 87c85c2..ccd7e5e 100644
--- a/fingerprint/service/soft_sensor/sensor83/sensor_83.c
+++ b/fingerprint/service/soft_sensor/sensor83/sensor_83.c
@@ -871,12 +871,14 @@ static int calc_refdrvsel(int *bkg_grey_avg)
     unsigned char refdrv = 0;
 
     ret = fp83_calc_close_driver_refdrvsel(bkg_grey_avg);
+    
     if(ret == SUCCESS) {
         fp83_capture_mode();
         context_get_sensor83_refdrv(&refdrv);
         sensor_set_register(MA_83_REF_DRV_SEL_REG, g_close_driver_refdrvsel);
         sensor_set_register(MA_83_REF_DRV_REG, (refdrv & 0xdf));
         fp83_read_image(g_close_driver_bkg, IMAGE_SIZE, 1, 1);
+        context_set_sensor83_close_driver_bkg(g_close_driver_bkg);
         ret = fp83_calc_open_driver_refdrvsel();
     } else {
         LOGE("calc_close_driver_refdrvsel fail, ret = %d.", ret);
@@ -1525,7 +1527,33 @@ int fp83_storage_factory_test(void *buf, int len)
     return ret;
 }
 
+/*
+ * close driver read image
+ */
+int fp83_read_image_close_driver(int *bkgimage)
+{
+    int ret = SUCCESS;
+    int bkg_grey=0;
+    unsigned char refdrv = 0;
 
+    ret = fp83_calc_close_driver_refdrvsel(&bkg_grey);
+    LOGD("calc close driver ret = %d", ret);
+
+    if(ret == SUCCESS) {
+        fp83_capture_mode();
+        context_get_sensor83_refdrv(&refdrv);
+        sensor_set_register(MA_83_REF_DRV_SEL_REG, g_close_driver_refdrvsel);
+        sensor_set_register(MA_83_REF_DRV_REG, (refdrv & 0xdf));
+        fp83_read_image(g_close_driver_bkg, IMAGE_SIZE, 1, 1);
+
+        memcpy(bkgimage, g_close_driver_bkg, sizeof(g_close_driver_bkg));
+
+//         ret = fp83_calc_open_driver_refdrvsel();
+    }else{
+        LOGE(" calc close driver fail");
+    }
+    return ret;
+}
 /*
 static void read_line(void)
 {
diff --git a/fingerprint/service/soft_sensor/sensor83/sensor_83.h b/fingerprint/service/soft_sensor/sensor83/sensor_83.h
index 2600e18..757f93e 100644
--- a/fingerprint/service/soft_sensor/sensor83/sensor_83.h
+++ b/fingerprint/service/soft_sensor/sensor83/sensor_83.h
@@ -31,7 +31,7 @@ int fp83_read_image_new(int *buf, int len, int line_step);
 int fp83_read_image_temperature_line(int *buf, int len, int line_step, int start_line, int end_line);
 int fp83_read_image_temperature(int *buf, int len, int line_step);
 int fp83_storage_factory_test(void *buf, int len);
-
+int fp83_read_image_close_driver(int *bkgimage);
 int sid03_refresh_key_th(void);
 
 extern int g_sensor83_grey_offset;
diff --git a/fingerprint/service/soft_sensor/sensor83/sensor_context.c b/fingerprint/service/soft_sensor/sensor83/sensor_context.c
index 116238e..fe58a1e 100644
--- a/fingerprint/service/soft_sensor/sensor83/sensor_context.c
+++ b/fingerprint/service/soft_sensor/sensor83/sensor_context.c
@@ -27,6 +27,7 @@ typedef struct sensor_property
     int sensor_param_calibrated;
     unsigned char calibrate_data[81];
     int bkg[IMAGE_SIZE];
+    int close_driver_bkg[IMAGE_SIZE];
     unsigned char sid03_capsel[6];
     unsigned char sid03_drvsel[6];
     unsigned short sid03_key_thresh[8];
@@ -119,6 +120,16 @@ int *context_get_sensor83_bkg(void)
     return s_sensor_ctx.property.bkg;
 }
 
+void context_set_sensor83_close_driver_bkg(int *close_bkg)
+{
+    memcpy(s_sensor_ctx.property.close_driver_bkg, close_bkg,IMAGE_SIZE*sizeof(int));
+}
+
+int *context_get_sensor83_close_driver_bkg(void)
+{
+    return s_sensor_ctx.property.close_driver_bkg;
+}
+
 void context_set_calibrate_data(unsigned char *calibrate_data)
 {
     memcpy(s_sensor_ctx.property.calibrate_data, calibrate_data, 81);
diff --git a/fingerprint/service/soft_sensor/sensor83/sensor_context.h b/fingerprint/service/soft_sensor/sensor83/sensor_context.h
index 31d2bf3..1b5ba4a 100644
--- a/fingerprint/service/soft_sensor/sensor83/sensor_context.h
+++ b/fingerprint/service/soft_sensor/sensor83/sensor_context.h
@@ -39,6 +39,9 @@ void context_get_sensor83_bkg_energy(int *bkg_energy);
 void context_set_sensor83_bkg(int *bkg);
 int *context_get_sensor83_bkg(void);
 
+void context_set_sensor83_close_driver_bkg(int *close_bkg);
+int *context_get_sensor83_close_driver_bkg(void);
+
 void context_set_sensor83_refdrv(unsigned char refdrv);
 void context_get_sensor83_refdrv(unsigned char *refdrv);
 
diff --git a/fingerprint/service/soft_sensor/sensor83/sensor_wrapper.c b/fingerprint/service/soft_sensor/sensor83/sensor_wrapper.c
index 7843651..c66db92 100644
--- a/fingerprint/service/soft_sensor/sensor83/sensor_wrapper.c
+++ b/fingerprint/service/soft_sensor/sensor83/sensor_wrapper.c
@@ -18,6 +18,7 @@
 #include "sensor83_config.h"
 #include "malog.h"
 #include "platform_interface.h"
+#include <unistd.h>
 
 //#define SAVE83_FILE
 
@@ -42,6 +43,7 @@ typedef struct authenticate_context {
 
 static uint32_t s_navi_result = NAVI_NONE;
 static int s_img_temp[TEMPLATE_SIZE_A83];
+static unsigned char img_temp[TEMPLATE_SIZE_A83];
 
 typedef struct navigation_context {
     int bkg[IMAGE_SIZE];
@@ -59,6 +61,7 @@ static int s_cnt_img = 0;
 static int g_src_enroll_image[IMAGE_SIZE];
 #endif
 
+static int sensor83_save_paras(void);
 /*************************** PRIVATE FUNCTION ********************/
 /* 获取产品码，如MA96等
  * @product_id 产品码
@@ -125,8 +128,12 @@ static int sensor83_reset_interrupt_parameters(void) {
 static int sensor83_create(microarray_properties_t *config) {
 	int ret = SUCCESS;
 	int calibrated;
+    float diff_module_ret;
+    int* oribkg;
+    int curbkg[IMAGE_SIZE];
+    char *propert_file_path="/data/system/ma_fingerprint/sensor.properties";
 
-	LOGD("start.------------------------------");
+    LOGD("start.------------------------------");
 	(void) config;
 	g_enroll_ctx = malloc(sizeof(enroll_context_t));
 	g_auth_ctx = malloc(sizeof(authenticate_context_t));
@@ -160,12 +167,29 @@ static int sensor83_create(microarray_properties_t *config) {
 	LOGD("### calibrated = %d", calibrated);
 	if (SENSOR_CALIBRATED != calibrated) {
 		ret = sensor83_calc_init_parameters();
-	}
-	context_get_sensor83_interrupt_calibrated(&g_config.ma_ctx.interrupt_calibrated);
-	fp83_detect_mode();
-
-	LOGD("end.-------------------");
-
+	}else{
+        oribkg = context_get_sensor83_close_driver_bkg();
+        ret = fp83_read_image_close_driver(curbkg);
+
+        diff_module_ret=fp83_diff_module(oribkg, curbkg);
+        if(diff_module_ret==-1){
+            LOGD("get image fail,do it again");
+        }else if(diff_module_ret >= 0.81){
+            LOGD("belong to the same one");
+        }else{
+            LOGD("do not belong to the same one");
+            if(access(propert_file_path, F_OK) == 0){
+//                 remove(propert_file_path);
+            }
+            sensor83_calc_init_parameters();
+            fp83_reset_interrupt_parameters();
+            fp83_calc_interrupt_parameters();
+            ret=sensor83_save_paras();
+        }
+    }
+    context_get_sensor83_interrupt_calibrated(&g_config.ma_ctx.interrupt_calibrated);
+    fp83_detect_mode();
+    LOGD("end.-------------------");
 	return ret;
 }
 
@@ -400,7 +424,7 @@ static int algorithm83_press_detect_texture(void *image, int type) {
 	count = fp83_press_detect(image_in, context_get_sensor83_bkg(), g_sensor83_grey_offset);
 	sratio = count * 100 / SIZE;
     LOGD("press detect texture count = %d, sratio = %d",count, sratio);
-//	press_save_bmp(image);
+//     press_save_bmp(image);
 	switch (type) {
 	case AUTHENTICATE_DETECT:
 	    ret = (sratio > 25) ? NORMAL_PRESSED : NORMAL_UNPRESSED;
@@ -619,12 +643,15 @@ static int algorithm83_authenticate(int *fid_count, uint32_t *fid) {
 	if(char_num == 0) {
 	    LOGE("extract character fail.");
 	}
-	if(is_texture(s_img_temp)==0) {
-		LOGE("not found texture.");
-		return ERROR_EXTRACT_FAIL;
-	}
+    get_temp_txt(img_temp,s_img_temp,sizeof(img_temp));
+    if(gradxy(img_temp,32,20) == 0){
+        LOGD("not a finger");
+        return ERROR_EXTRACT_FAIL;
+    }else{
+        LOGD("is a finger");
+    }
 #ifdef SAVE83_FILE
-	{
+    {
 		static int num =0;
 		char name[128];
 		sprintf(name, "/data/system/users/0/fpdata/temp%.3d_ch%.2d.txt", num, char_num);
@@ -659,14 +686,14 @@ match_again:
 	if (ret != 0) {
 		LOGD("score=%d, char_num=%d, matchArea=%d score_th=%d, temp_idx=%d, temp_num=%d ratio=%d isMult=%d\n",
 			last_score, char_num, last_area, g_config.auth_score, last_temp_idx, last_temp_num, sratio, isMult);
-		match_save_bmp(ret, char_num);
+        match_save_bmp(ret, char_num);
 		LOGD("match successfully.");
 	} else {
 		if (isMult == 1) {
 			isMult = 0;
 			goto match_again;
 		} else if(count_down==0) { //最后一次尝试失败打印
-			match_save_bmp(ret, char_num);
+            match_save_bmp(ret, char_num);
 			LOGD("score=%d, char_num=%d, matchArea=%d score_th=%d, ratio=%d\n",
 				score, char_num, area, g_config.auth_score, sratio);
 			LOGD("match failed.");
@@ -678,6 +705,7 @@ match_again:
 	}
 
 	*fid = ret;
+    LOGD("end");
 	return SUCCESS;
 }
 
@@ -687,7 +715,7 @@ match_again:
  */
 static int algorithm83_enroll_start(uint64_t user_id) {
 	int ret;
-	
+
 	fp83_reset_mode();
 	g_enroll_ctx->max_count = 0;
 	memset(g_enroll_ctx->max_image, 0, sizeof(g_enroll_ctx->max_image));
